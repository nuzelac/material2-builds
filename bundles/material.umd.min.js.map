{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/observe-content/observe-content.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/select/select.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/core/data-table/row.ts","../../src/lib/core/data-table/cell.ts","../../src/lib/core/data-table/data-table.ts","../../src/lib/core/data-table/data-source.ts","../../src/lib/core/data-table/index.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/module.ts","../../src/lib/expansion/index.ts","../../src/lib/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/index.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/tooltip/index.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/index.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog-injector.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/index.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/snack-bar/index.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/tabs/index.ts","../../src/lib/toolbar/index.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/index.ts","../../src/lib/input/input-container.ts","../../src/lib/input/autosize.ts","../../src/lib/input/index.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/list/index.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/index.ts","../../src/lib/card/card.ts","../../src/lib/card/index.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slider/slider.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/slider/index.ts","../../src/lib/sidenav/index.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/index.ts","../../src/lib/core/a11y/list-key-manager.ts","../../src/lib/core/a11y/focus-key-manager.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button/button.ts","../../src/lib/button/index.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/index.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/a11y/interactivity-checker.ts","../../src/lib/core/a11y/focus-trap.ts","../../src/lib/core/a11y/live-announcer.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/a11y/index.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/a11y/fake-mousedown.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/style/index.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/coercion/number-property.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/core.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/line/line.ts","../../src/lib/core/rtl/dir.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/platform/platform.ts","../../src/lib/core/platform/features.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/platform/index.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/overlay/scroll/close-scroll-strategy.ts","../../src/lib/core/overlay/scroll/block-scroll-strategy.ts","../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts","../../src/lib/core/overlay/scroll/scroll-strategy-options.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/coercion/boolean-property.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/portal/portal-errors.ts","../../src/lib/core/portal/portal.ts","../../src/lib/core/portal/portal-directives.ts","../../src/lib/core/overlay/overlay-state.ts","../../src/lib/core/portal/dom-portal-host.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/overlay/position/connected-position.ts","../../node_modules/tslib/tslib.es6.js","../../node_modules/ng2-dnd/src/dnd.utils.js","../../node_modules/ng2-dnd/src/dnd.service.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/overlay/scroll/index.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/keyboard/keycodes.ts","../../node_modules/ng2-dnd/src/dnd.config.js","../../node_modules/ng2-dnd/src/abstract.component.js","../../node_modules/ng2-dnd/src/draggable.component.js","../../node_modules/ng2-dnd/src/droppable.component.js","../../node_modules/ng2-dnd/src/sortable.component.js","../../node_modules/ng2-dnd/index.js"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../../common-behaviors/color';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\nexport class MdPseudoCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdPseudoCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdPseudoCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdPseudoCheckboxBase = mixinColor(MdPseudoCheckboxBase, 'accent');\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox extends _MdPseudoCheckboxBase implements CanColor {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, renderer: Renderer2) {\n    super(renderer, elementRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  inputs: ['color'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport'rxjs/add/operator/debounceTime';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      this._debouncer\n        .debounceTime(this.debounce)\n        .subscribe(mutations => this.event.emit(mutations));\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n      this._debouncer.next(mutations);\n    });\n\n    if (this._observer) {\n      this._observer.observe(this._elementRef.nativeElement, {\n        characterData: true,\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._debouncer.complete();\n      this._debouncer = this._observer = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n}\n\nexport class ObserveContentModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserveContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Platform} from '../platform/platform';\n\nimport'rxjs/add/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program';\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return Observable.of();\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ info = this._elementInfo.get(element);\n      info.checkChildren = checkChildren;\n      return info.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: null,\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element, null);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin: FocusOrigin): void {\n    let /** @type {?} */ renderer = this._elementInfo.get(element).renderer;\n    let /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n      shouldSet ? renderer.addClass(element, className) : renderer.removeClass(element, className);\n    };\n\n    toggleClass('cdk-focused', !!origin);\n    toggleClass('cdk-touch-focused', origin === 'touch');\n    toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n    toggleClass('cdk-mouse-focused', origin === 'mouse');\n    toggleClass('cdk-program-focused', origin === 'program');\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    this._elementInfo.get(element).subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element, null);\n    this._elementInfo.get(element).subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n\n\nexport const /** @type {?} */ FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit {\n/**\n * A date representing the period (month or year) to start the calendar in.\n */\nstartAt: D;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n */\nselected: D;\n/**\n * The minimum selectable date.\n */\nminDate: D;\n/**\n * The maximum selectable date.\n */\nmaxDate: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _isCompatibilityMode\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\npublic _isCompatibilityMode: boolean,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => this._ngZone.onStable.first().subscribe(() => {\n      let /** @type {?} */ activeEl = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n      activeEl.focus();\n    }));\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @type {?}\n */\nMdCalendar.prototype.startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdCalendar.prototype.selected;\n/**\n * The minimum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.minDate;\n/**\n * The maximum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._isCompatibilityMode;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n  Inject\n} from '@angular/core';\nimport {MdOption, MdOptionSelectionChange, MdOptgroup} from '../core/option/index';\nimport {ENTER, SPACE, UP_ARROW, DOWN_ARROW, HOME, END} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Dir} from '../core/rtl/dir';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {getMdSelectDynamicMultipleError, getMdSelectNonArrayValueError} from './select-errors';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/filter';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS} from '../core/placeholder/placeholder-options';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase = mixinColor(mixinDisabled(MdSelectBase), 'primary');\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Dir,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions) {\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, null, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = this.options.changes.startWith(null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._focusHost();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._getTriggerRect().width;\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');\n    scrollContainer.scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._selectValue(value, isUserInput);\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption {\n    let /** @type {?} */ optionsArray = this.options.toArray();\n    let /** @type {?} */ correspondingOption = optionsArray.find(option => {\n      return option.value != null && option.value === value;\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = this.optionSelectionChanges\n      .filter(event => event.isUserInput)\n      .subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? null : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth =  this._triggerWidth - 13;\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n    }\n  }\n/**\n * Focuses the host element when the panel closes.\n * @return {?}\n */\nprivate _focusHost(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = this._getOptionIndex(this._selectionModel.selected[0]);\n\n      selectedOptionOffset += this._getLabelCountBeforeOption(selectedOptionOffset);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n        '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0];\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * Calculates the amount of option group labels that precede the specified option.\n * Useful when positioning the panel, because the labels will offset the index of the\n * currently-selected option.\n * @param {?} optionIndex\n * @return {?}\n */\nprivate _getLabelCountBeforeOption(optionIndex: number): number {\n    if (this.optionGroups.length) {\n      let /** @type {?} */ options = this.options.toArray();\n      let /** @type {?} */ groups = this.optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (options[i].group && options[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.mat-select-disabled]': 'disabled',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._control;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdInkBar} from '../ink-bar';\nimport {MdRipple} from '../../core/ripple/index';\nimport {ViewportRuler} from '../../core/overlay/position/viewport-ruler';\nimport {Dir, MD_RIPPLE_GLOBAL_OPTIONS, Platform, RippleGlobalOptions} from '../../core';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/auditTime';\nimport'rxjs/add/operator/takeUntil';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/merge';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNav implements AfterContentInit, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * @param {?} _dir\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _ngZone: NgZone) { }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.dirChange : Observable.of(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          Observable.fromEvent(window, 'resize').auditTime(10) :\n          Observable.of(null);\n\n      return Observable.merge(dirChange, resize)\n          .takeUntil(this._onDestroy)\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n}\n\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink {\nprivate _isActive: boolean = false;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n  host: {'class': 'mat-tab-link'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/** @type {?} */\nMdTabLink.prototype._isActive;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n/**\n * Simple directive that extends the ripple and matches the selector of the MdTabLink. This\n * adds the ripple behavior to nav bar labels.\n */\nexport class MdTabLinkRipple extends MdRipple {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n      elementRef: ElementRef,\n      ngZone: NgZone,\n      ruler: ViewportRuler,\n      platform: Platform,\n        globalOptions: RippleGlobalOptions) {\n    super(elementRef, ngZone, ruler, platform, globalOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\n}\n\nfunction MdTabLinkRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLinkRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLinkRipple.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffer,\n  IterableDiffers,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\nimport {CdkCellDef} from './cell';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nexport abstract class BaseRowDef {\n/**\n * The columns to be displayed on this row.\n */\ncolumns: string[];\n/**\n * Event stream that emits when changes are made to the columns.\n */\ncolumnsChange: Subject<void> = new Subject<void>();\n/**\n * Differ used to check if any changes were made to the columns.\n */\nprotected _columnsDiffer: IterableDiffer<any>;\nprivate viewInitialized = false;\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(public template: TemplateRef<any>,\n              protected _differs: IterableDiffers) { }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this.viewInitialized = true;\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property.\n    if (!this._columnsDiffer) {\n      this._columnsDiffer = this._differs.find(changes['columns'].currentValue).create();\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (!this.viewInitialized || !this._columnsDiffer || !this.columns) { return; }\n\n    // Notify the table if there are any changes to the columns.\n    const /** @type {?} */ changes = this._columnsDiffer.diff(this.columns);\n    if (changes) { this.columnsChange.next(); }\n  }\n}\n\nfunction BaseRowDef_tsickle_Closure_declarations() {\n/**\n * The columns to be displayed on this row.\n * @type {?}\n */\nBaseRowDef.prototype.columns;\n/**\n * Event stream that emits when changes are made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype.columnsChange;\n/**\n * Differ used to check if any changes were made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype._columnsDiffer;\n/** @type {?} */\nBaseRowDef.prototype.viewInitialized;\n/** @type {?} */\nBaseRowDef.prototype.template;\n/** @type {?} */\nBaseRowDef.prototype._differs;\n}\n\n/**\n * Header row definition for the CDK data-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class CdkHeaderRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the CDK data-table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class CdkRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRowDef.ctorParameters;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nexport class CdkCellOutlet {\n/**\n * The ordered list of cells to render within this outlet's view container\n */\ncells: CdkCellDef[];\n/**\n * The data context to be provided to each cell\n */\ncontext: any;\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK data-table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nstatic mostRecentCellOutlet: CdkCellOutlet = null;\n/**\n * @param {?} _viewContainer\n */\nconstructor(private _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.cells.forEach(cell => {\n      this._viewContainer.createEmbeddedView(cell.template, this.context);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CdkCellOutlet_tsickle_Closure_declarations() {\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK data-table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n * @type {?}\n */\nCdkCellOutlet.mostRecentCellOutlet;\n/** @type {?} */\nCdkCellOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellOutlet.ctorParameters;\n/**\n * The ordered list of cells to render within this outlet's view container\n * @type {?}\n */\nCdkCellOutlet.prototype.cells;\n/**\n * The data context to be provided to each cell\n * @type {?}\n */\nCdkCellOutlet.prototype.context;\n/** @type {?} */\nCdkCellOutlet.prototype._viewContainer;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-header-row',\n  template: '<ng-container cdkCellOutlet></ng-container>',\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-row',\n  template: '<ng-container cdkCellOutlet></ng-container>',\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ContentChild, Directive, ElementRef, Input, Renderer2, TemplateRef} from '@angular/core';\n/**\n * Cell definition for a CDK data-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class CdkCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellDef.ctorParameters;\n/** @type {?} */\nCdkCellDef.prototype.template;\n}\n\n/**\n * Header cell definition for a CDK data-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class CdkHeaderCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCellDef.ctorParameters;\n/** @type {?} */\nCdkHeaderCellDef.prototype.template;\n}\n\n/**\n * Column definition for the CDK data-table.\n * Defines a set of cells available for a table column.\n */\nexport class CdkColumnDef {\n   name: string;\n\n   cell: CdkCellDef;\n   headerCell: CdkHeaderCellDef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkColumnDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['cdkColumnDef', ] },],\n'cell': [{ type: ContentChild, args: [CdkCellDef, ] },],\n'headerCell': [{ type: ContentChild, args: [CdkHeaderCellDef, ] },],\n};\n}\n\nfunction CdkColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkColumnDef.ctorParameters;\n/** @type {?} */\nCdkColumnDef.propDecorators;\n/** @type {?} */\nCdkColumnDef.prototype.name;\n/** @type {?} */\nCdkColumnDef.prototype.cell;\n/** @type {?} */\nCdkColumnDef.prototype.headerCell;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class CdkHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private columnDef: CdkColumnDef,\nprivate elementRef: ElementRef,\nprivate renderer: Renderer2) {\n    this.renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-header-cell',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCell.ctorParameters;\n/** @type {?} */\nCdkHeaderCell.prototype.columnDef;\n/** @type {?} */\nCdkHeaderCell.prototype.elementRef;\n/** @type {?} */\nCdkHeaderCell.prototype.renderer;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class CdkCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private columnDef: CdkColumnDef,\nprivate elementRef: ElementRef,\nprivate renderer: Renderer2) {\n    this.renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-cell',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCell.ctorParameters;\n/** @type {?} */\nCdkCell.prototype.columnDef;\n/** @type {?} */\nCdkCell.prototype.elementRef;\n/** @type {?} */\nCdkCell.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CollectionViewer, DataSource} from './data-source';\nimport {BaseRowDef, CdkCellOutlet, CdkHeaderRowDef, CdkRowDef} from './row';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {Observable} from 'rxjs/Observable';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport'rxjs/add/operator/let';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/observable/combineLatest';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nexport class RowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[rowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowPlaceholder.ctorParameters;\n/** @type {?} */\nRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nexport class HeaderRowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[headerRowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction HeaderRowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderRowPlaceholder.ctorParameters;\n/** @type {?} */\nHeaderRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * A data table that connects with a data source to retrieve data of type T and renders\n * a header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport class CdkTable<T> implements CollectionViewer {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n/**\n * Flag set to true after the component has been initialized.\n */\nprivate _isViewInitialized = false;\n/**\n * Latest data provided by the data source through the connect interface.\n */\nprivate _data: NgIterable<T> = [];\n/**\n * Subscription that listens for the data provided by the data source.\n */\nprivate _renderChangeSubscription: Subscription;\n/**\n * Map of all the user's defined columns identified by name.\n * Contains the header and data-cell templates.\n */\nprivate _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\n/**\n * Differ used to find the changes in the data provided by the data source.\n */\nprivate _dataDiffer: IterableDiffer<T> = null;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n */\nviewChange =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\n * stream of view window (what rows are currently on screen).\n * @return {?}\n */\nget dataSource(): DataSource<T> { return this._dataSource; }\n/**\n * @param {?} dataSource\n * @return {?}\n */\nset dataSource(dataSource: DataSource<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\nprivate _dataSource: DataSource<T>;\n\n  // Placeholders within the table's template where the header and data rows will be inserted.\n   _rowPlaceholder: RowPlaceholder;\n   _headerRowPlaceholder: HeaderRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n */\n_columnDefinitions: QueryList<CdkColumnDef>;\n/**\n * Template used as the header container.\n */\n_headerDefinition: CdkHeaderRowDef;\n/**\n * Set of templates that used as the data row containers.\n */\n_rowDefinitions: QueryList<CdkRowDef>;\n/**\n * @param {?} _differs\n * @param {?} _changeDetectorRef\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} role\n */\nconstructor(private readonly _differs: IterableDiffers,\nprivate readonly _changeDetectorRef: ChangeDetectorRef,\n              elementRef: ElementRef,\n              renderer: Renderer2,\n               role: string) {\n    // Show the stability warning of the data-table only if it doesn't run inside of jasmine.\n    // This is just temporary and should reduce warnings when running the tests.\n    if (!(typeof window !== 'undefined' && window['jasmine'])) {\n      console.warn('The data table is still in active development ' +\n          'and should be considered unstable.');\n    }\n\n    if (!role) {\n      renderer.setAttribute(elementRef.nativeElement, 'role', 'grid');\n    }\n\n    // TODO(andrewseguin): Add trackby function input.\n    // Find and construct an iterable differ that can be used to find the diff in an array.\n    this._dataDiffer = this._differs.find(this._data).create();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // TODO(andrewseguin): Setup a listener for scroll events\n    //   and emit the calculated view to this.viewChange\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // TODO(andrewseguin): Throw an error if two columns share the same name\n    this._columnDefinitions.forEach(columnDef => {\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\n    });\n\n    // Re-render the rows if any of their columns change.\n    // TODO(andrewseguin): Determine how to only re-render the rows that have their columns changed.\n    Observable.merge(...this._rowDefinitions.map(rowDef => rowDef.columnsChange))\n        .takeUntil(this._onDestroy)\n        .subscribe(() => {\n          // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\n          this._rowPlaceholder.viewContainer.clear();\n          this._dataDiffer.diff([]);\n          this._renderRowChanges();\n        });\n\n    // Re-render the header row if the columns change\n    this._headerDefinition.columnsChange\n        .takeUntil(this._onDestroy)\n        .subscribe(() => {\n          this._headerRowPlaceholder.viewContainer.clear();\n          this._renderHeaderRow();\n        });\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._renderHeaderRow();\n\n    if (this.dataSource) {\n      this._observeRenderChanges();\n    }\n\n    this._isViewInitialized = true;\n  }\n/**\n * Switch to the provided data source by resetting the data and unsubscribing from the current\n * render change subscription if one exists. If the data source is null, interpret this by\n * clearing the row placeholder. Otherwise start listening for new data.\n * @param {?} dataSource\n * @return {?}\n */\nprivate _switchDataSource(dataSource: DataSource<T>) {\n    this._data = [];\n    this._dataSource = dataSource;\n\n    if (this._isViewInitialized) {\n      if (this._renderChangeSubscription) {\n        this._renderChangeSubscription.unsubscribe();\n      }\n\n      if (this._dataSource) {\n        this._observeRenderChanges();\n      } else {\n        this._rowPlaceholder.viewContainer.clear();\n      }\n    }\n  }\n/**\n * Set up a subscription for the data provided by the data source.\n * @return {?}\n */\nprivate _observeRenderChanges() {\n    this._renderChangeSubscription = this.dataSource.connect(this)\n        .takeUntil(this._onDestroy)\n        .subscribe(data => {\n          this._data = data;\n          this._renderRowChanges();\n        });\n  }\n/**\n * Create the embedded view for the header template and place it in the header row view container.\n * @return {?}\n */\nprivate _renderHeaderRow() {\n    const /** @type {?} */ cells = this._getHeaderCellTemplatesForRow(this._headerDefinition);\n    if (!cells.length) { return; }\n\n    // TODO(andrewseguin): add some code to enforce that exactly\n    //   one CdkCellOutlet was instantiated as a result\n    //   of `createEmbeddedView`.\n    this._headerRowPlaceholder.viewContainer\n        .createEmbeddedView(this._headerDefinition.template, {cells});\n    CdkCellOutlet.mostRecentCellOutlet.cells = cells;\n    CdkCellOutlet.mostRecentCellOutlet.context = {};\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Check for changes made in the data and render each change (row added/removed/moved).\n * @return {?}\n */\nprivate _renderRowChanges() {\n    const /** @type {?} */ changes = this._dataDiffer.diff(this._data);\n    if (!changes) { return; }\n\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            this._insertRow(this._data[currentIndex], currentIndex);\n          } else if (currentIndex == null) {\n            this._rowPlaceholder.viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = this._rowPlaceholder.viewContainer.get(adjustedPreviousIndex);\n            this._rowPlaceholder.viewContainer.move(view, currentIndex);\n          }\n        });\n  }\n/**\n * Create the embedded view for the data row template and place it in the correct index location\n * within the data row view container.\n * @param {?} rowData\n * @param {?} index\n * @return {?}\n */\nprivate _insertRow(rowData: T, index: number) {\n    // TODO(andrewseguin): Add when predicates to the row definitions\n    //   to find the right template to used based on\n    //   the data rather than choosing the first row definition.\n    const /** @type {?} */ row = this._rowDefinitions.first;\n\n    // TODO(andrewseguin): Add more context, such as first/last/isEven/etc\n    const /** @type {?} */ context = {$implicit: rowData};\n\n    // TODO(andrewseguin): add some code to enforce that exactly one\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context, index);\n\n    // Insert empty cells if there is no data to improve rendering time.\n    CdkCellOutlet.mostRecentCellOutlet.cells = rowData ? this._getCellTemplatesForRow(row) : [];\n    CdkCellOutlet.mostRecentCellOutlet.context = context;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Returns the cell template definitions to insert into the header\n * as defined by its list of columns to display.\n * @param {?} headerDef\n * @return {?}\n */\nprivate _getHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\n    return headerDef.columns.map(columnId => {\n      // TODO(andrewseguin): Throw an error if there is no column with this columnId\n      return this._columnDefinitionsByName.get(columnId).headerCell;\n    });\n  }\n/**\n * Returns the cell template definitions to insert in the provided row\n * as defined by its list of columns to display.\n * @param {?} rowDef\n * @return {?}\n */\nprivate _getCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\n    return rowDef.columns.map(columnId => {\n      // TODO(andrewseguin): Throw an error if there is no column with this columnId\n      return this._columnDefinitionsByName.get(columnId).cell;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table',\n  template: `\n    <ng-container headerRowPlaceholder></ng-container>\n    <ng-container rowPlaceholder></ng-container>\n  `,\n  host: {\n    'class': 'cdk-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: Renderer2, },\n{type: undefined, decorators: [{ type: Attribute, args: ['role', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataSource': [{ type: Input },],\n'_rowPlaceholder': [{ type: ViewChild, args: [RowPlaceholder, ] },],\n'_headerRowPlaceholder': [{ type: ViewChild, args: [HeaderRowPlaceholder, ] },],\n'_columnDefinitions': [{ type: ContentChildren, args: [CdkColumnDef, ] },],\n'_headerDefinition': [{ type: ContentChild, args: [CdkHeaderRowDef, ] },],\n'_rowDefinitions': [{ type: ContentChildren, args: [CdkRowDef, ] },],\n};\n}\n\nfunction CdkTable_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTable.ctorParameters;\n/** @type {?} */\nCdkTable.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nCdkTable.prototype._onDestroy;\n/**\n * Flag set to true after the component has been initialized.\n * @type {?}\n */\nCdkTable.prototype._isViewInitialized;\n/**\n * Latest data provided by the data source through the connect interface.\n * @type {?}\n */\nCdkTable.prototype._data;\n/**\n * Subscription that listens for the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._renderChangeSubscription;\n/**\n * Map of all the user's defined columns identified by name.\n * Contains the header and data-cell templates.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitionsByName;\n/**\n * Differ used to find the changes in the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._dataDiffer;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n * @type {?}\n */\nCdkTable.prototype.viewChange;\n/** @type {?} */\nCdkTable.prototype._dataSource;\n/** @type {?} */\nCdkTable.prototype._rowPlaceholder;\n/** @type {?} */\nCdkTable.prototype._headerRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitions;\n/**\n * Template used as the header container.\n * @type {?}\n */\nCdkTable.prototype._headerDefinition;\n/**\n * Set of templates that used as the data row containers.\n * @type {?}\n */\nCdkTable.prototype._rowDefinitions;\n/** @type {?} */\nCdkTable.prototype._differs;\n/** @type {?} */\nCdkTable.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\n\nexport interface CollectionViewer {\n  viewChange: Observable<{start: number, end: number}>;\n}\n/**\n * @abstract\n */\nexport abstract class DataSource<T> {\n/**\n * @abstract\n * @param {?} collectionViewer\n * @return {?}\n */\nconnect(collectionViewer: CollectionViewer) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HeaderRowPlaceholder, RowPlaceholder, CdkTable} from './data-table';\nimport {CdkCellOutlet, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef} from './row';\nimport {CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef} from './cell';\n\nexport {CollectionViewer,DataSource} from './data-source';\nexport {RowPlaceholder,HeaderRowPlaceholder,CdkTable} from './data-table';\nexport class CdkDataTableModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [\n    CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef,\n    CdkColumnDef, CdkCell, CdkRow,\n    CdkHeaderCell, CdkHeaderRow, CdkHeaderRowDef],\n  declarations: [\n    CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef,\n    CdkColumnDef, CdkCell, CdkRow,\n    CdkHeaderCell, CdkHeaderRow, CdkHeaderRowDef,\n    RowPlaceholder, HeaderRowPlaceholder,\n  ]\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkDataTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkDataTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkDataTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Output, EventEmitter, Input, Injectable, OnDestroy, Optional} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the MdAccordianChild is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the MdAccordianChild is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the MdAccordianChild is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique MdAccordianChild id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the MdAccordianChild is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordonItem,\n * the name value is the id of the accordion.\n */\nlet accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n    }\n  }\nprivate _expanded: boolean;\n/**\n * @param {?} accordion\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n     _expansionDispatcher.listen((id: string, accordionId: string) => {\n       if (this.accordion && !this.accordion.multi &&\n           this.accordion.id === accordionId && this.id !== id) {\n         this.expanded = false;\n       }\n     });\n    }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the MdAccordianChild is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the MdAccordianChild is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the MdAccordianChild is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique MdAccordianChild id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  Input,\n  ViewEncapsulation,\n  Optional,\n  forwardRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {MdAccordion, MdAccordionDisplayMode} from './accordion';\nimport {AccordionItem} from './accordion-item';\nimport {UniqueSelectionDispatcher} from '../core';\n\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends AccordionItem {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * @param {?} accordion\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Gets the panel's display mode.\n * @return {?}\n */\n_getDisplayMode(): MdAccordionDisplayMode | MdExpansionPanelState {\n    if (!this.expanded) {\n      return this._getExpandedState();\n    }\n    if (this.accordion) {\n      return this.accordion.displayMode;\n    }\n    return this._getExpandedState();\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[@displayMode]': '_getDisplayMode()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('displayMode', [\n      state('collapsed', style({margin: '0'})),\n      state('default', style({margin: '16px 0'})),\n      state('flat', style({margin: '0'})),\n      transition('flat <=> collapsed, default <=> collapsed, flat <=> default',\n                 animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '../core/keyboard/keycodes';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader {\n/**\n * @param {?} panel\n */\nconstructor(\npublic panel: MdExpansionPanel) {}\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    this.panel.toggle();\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator is hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    return this.panel.hideToggle;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    'tabindex': '0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': '_getExpandedState()',\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({height: '48px', 'line-height': '48px'})),\n      state('expanded', style({height: '64px', 'line-height': '68px'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {\n  A11yModule,\n  MdCommonModule,\n  MdRippleModule,\n  ObserveContentModule,\n  OverlayModule,\n  PortalModule,\n  RtlModule\n} from './core/index';\n\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\nimport {MdDatepickerModule} from './datepicker/index';\nimport {CdkDataTableModule} from './core/data-table/index';\nimport {MdExpansionModule} from './expansion/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDatepickerModule,\n  MdDialogModule,\n  MdExpansionModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  RtlModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  MdCommonModule,\n  ObserveContentModule,\n  CdkDataTableModule\n];\n/**\n * @deprecated\n */\nexport class MaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '../core';\nimport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\nimport {\n  MdExpansionPanel,\n  MdExpansionPanelActionRow,\n} from './expansion-panel';\nimport {\n  CdkAccordion,\n  MdAccordion,\n} from './accordion';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\nexport {\n  CdkAccordion,\n  MdAccordion,\n  MdAccordionDisplayMode\n} from './accordion';\nexport {AccordionItem} from './accordion-item';\nexport {\n  MdExpansionPanel,\n  MdExpansionPanelState,\n  MdExpansionPanelActionRow\n} from './expansion-panel';\nexport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MaterialModule,MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MdButtonToggleModule,ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdChipsModule,MdChipList,MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,CdkDataTableModule,CollectionViewer,DataSource,RowPlaceholder,HeaderRowPlaceholder,CdkTable,MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView,MdDialogModule,MD_DIALOG_DATA,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdExpansionModule,CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdGridListModule,MdGridTile,MdGridList,MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MdInputModule,MdTextareaAutosize,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError,MdListModule,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MdProgressBarModule,MdProgressBar,MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect,MdSidenavModule,throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer,MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabNav,MdTabLink,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup,MdTabLinkRipple,MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {LIVE_ANNOUNCER_PROVIDER_FACTORY as ɵi} from './core/a11y/live-announcer';\nexport {mixinColor as ɵw} from './core/common-behaviors/color';\nexport {mixinDisabled as ɵx} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵj} from './core/coordination/unique-selection-dispatcher';\nexport {CdkCell as ɵbd,CdkCellDef as ɵz,CdkColumnDef as ɵbb,CdkHeaderCell as ɵbc,CdkHeaderCellDef as ɵba} from './core/data-table/cell';\nexport {BaseRowDef as ɵbe,CdkCellOutlet as ɵbh,CdkHeaderRow as ɵbi,CdkHeaderRowDef as ɵbf,CdkRow as ɵbj,CdkRowDef as ɵbg} from './core/data-table/row';\nexport {MdDateFormats as ɵy} from './core/datetime/date-formats';\nexport {MdMutationObserverFactory as ɵa} from './core/observe-content/observe-content';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵc,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵb} from './core/overlay/overlay-container';\nexport {OverlayPositionBuilder as ɵv} from './core/overlay/position/overlay-position-builder';\nexport {VIEWPORT_RULER_PROVIDER as ɵe,VIEWPORT_RULER_PROVIDER_FACTORY as ɵd} from './core/overlay/position/viewport-ruler';\nexport {SCROLL_DISPATCHER_PROVIDER as ɵg,SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵf} from './core/overlay/scroll/scroll-dispatcher';\nexport {RippleRenderer as ɵh} from './core/ripple/ripple-renderer';\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵk} from './expansion/expansion-panel';\nexport {MdGridAvatarCssMatStyler as ɵm,MdGridTileFooterCssMatStyler as ɵo,MdGridTileHeaderCssMatStyler as ɵn,MdGridTileText as ɵl} from './grid-list/grid-tile';\nexport {MdMenuItemBase as ɵp,_MdMenuItemMixinBase as ɵq} from './menu/menu-item';\nexport {MdTabBase as ɵt,_MdTabMixinBase as ɵu} from './tabs/tab';\nexport {MdTabLabelWrapperBase as ɵr,_MdTabLabelWrapperMixinBase as ɵs} from './tabs/tab-label-wrapper';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW, ESCAPE} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {MdInputContainer} from '../input/input-container';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/switchMap';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n                   'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n                   'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _zone\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Dir,\nprivate _zone: NgZone,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n\n    // We need to trigger change detection manually, because\n    // `fromEvent` doesn't seem to do it at the proper time.\n    // This ensures that the placeholder is reset when the\n    // user clicks outside.\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (this._document) {\n      return Observable.fromEvent(this._document, 'click').filter((event: MouseEvent) => {\n        const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n        const /** @type {?} */ inputContainer = this._inputContainer ?\n            this._inputContainer._elementRef.nativeElement : null;\n\n        return this._panelOpen &&\n               clickTarget !== this._element.nativeElement &&\n               (!inputContainer || !inputContainer.contains(clickTarget)) &&\n               !this._overlayRef.overlayElement.contains(clickTarget);\n      });\n    }\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this.closePanel();\n    } else if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. The new scrollTop will be that offset - the panel height + the option\n * height, so the active option will be just visible at the bottom of the panel.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset =\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    this._element.nativeElement.value = toDisplay || '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to null so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(null);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete],' +\n  'textarea[mdAutocomplete], textarea[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: ChangeDetectorRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdOptionModule, OverlayModule, MdCommonModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {MdAutocompleteTrigger} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {AutocompletePositionY,MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate == date) {\n      return;\n    }\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate),\n        date));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        this._dateAdapter.getDate(this.activeDate)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdInputContainer} from '../input/input-container';\nimport {DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) { this.mdDatepicker = value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D {\n    return this._dateAdapter.parse(this._elementRef.nativeElement.value,\n        this._dateFormats.parse.dateInput);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    let /** @type {?} */ oldDate = this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        date ? this._dateAdapter.format(date, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, date)) {\n      this._valueChange.emit(date);\n    }\n  }\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D) {\n    this._min = value;\n    this._validatorOnChange();\n  }\nprivate _min: D;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D) {\n    this._max = value;\n    this._validatorOnChange();\n  }\nprivate _max: D;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription: Subscription;\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.min || !control.value ||\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': control.value}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.max || !control.value ||\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': control.value}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn =\n      Validators.compose([this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdInputContainer\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdInputContainer: MdInputContainer) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._datepickerSubscription) {\n      this._datepickerSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdInputContainer ? this._mdInputContainer.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-expanded]': '_datepicker?.opened || \"false\"',\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '_datepicker?.id',\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\n    '(input)': '_onInput($event.target.value)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdInputContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  NgZone,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay} from '../core/overlay/overlay';\nimport {OverlayRef} from '../core/overlay/overlay-ref';\nimport {ComponentPortal} from '../core/portal/portal';\nimport {OverlayState} from '../core/overlay/overlay-state';\nimport {Dir} from '../core/rtl/dir';\nimport {MdDialog} from '../dialog/dialog';\nimport {MdDialogRef} from '../dialog/dialog-ref';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdDialogConfig} from '../dialog/dialog-config';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {MdCalendar} from './calendar';\nimport'rxjs/add/operator/first';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D) { this._startAt = date; }\nprivate _startAt: D;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Emits new selected date when selected date changes.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n */\n_selected: D = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any>;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The input element this datepicker is associated with.\n */\nprivate _datepickerInput: MdDatepickerInput<D>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement;\nprivate _inputSubscription: Subscription;\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Dir,\nprivate _document: any) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n    if (this._inputSubscription) {\n      this._inputSubscription.unsubscribe();\n    }\n  }\n/**\n * Selects the given date and closes the currently open popup or dialog.\n * @param {?} date\n * @return {?}\n */\n_selectAndClose(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n    this.close();\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen && 'focus' in this._focusedElementBeforeOpen) {\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    let /** @type {?} */ config = new MdDialogConfig();\n    config.viewContainerRef = this._viewContainerRef;\n\n    this._dialogRef = this._dialog.open(MdDatepickerContent, config);\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.first().subscribe(() => this._popupRef.updatePosition());\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._createPopupPositionStrategy();\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'md-overlay-transparent-backdrop';\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/**\n * Emits new selected date when selected date changes.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdDatepicker.prototype._selected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nexport class MdDatepickerToggle<D> {\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * @return {?}\n */\nget _datepicker() { return this.datepicker; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _datepicker(v: MdDatepicker<D>) { this.datepicker = v; }\n/**\n * @param {?} _intl\n */\nconstructor(public _intl: MdDatepickerIntl) {}\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[mdDatepickerToggle], button[matDatepickerToggle]',\n  template: '',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'type': 'button',\n    'class': 'mat-datepicker-toggle',\n    '[attr.aria-label]': '_intl.openCalendarLabel',\n    '(click)': '_open($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['mdDatepickerToggle', ] },],\n'_datepicker': [{ type: Input, args: ['matDatepickerToggle', ] },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdMonthView} from './month-view';\nimport {CommonModule} from '@angular/common';\nimport {StyleModule, OverlayModule, A11yModule} from '../core';\nimport {MdCalendarBody} from './calendar-body';\nimport {MdYearView} from './year-view';\nimport {MdDatepicker, MdDatepickerContent} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDialogModule} from '../dialog/index';\nimport {MdCalendar} from './calendar';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {MdButtonModule} from '../button/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\n\n\nexport {MdCalendar} from './calendar';\nexport {MdCalendarCell,MdCalendarBody} from './calendar-body';\nexport {MdDatepickerContent,MdDatepicker} from './datepicker';\nexport {MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput} from './datepicker-input';\nexport {MdDatepickerIntl} from './datepicker-intl';\nexport {MdDatepickerToggle} from './datepicker-toggle';\nexport {MdMonthView} from './month-view';\nexport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    OverlayModule,\n    StyleModule,\n    A11yModule,\n  ],\n  exports: [\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Dir} from '../core/rtl/dir';\nimport {Platform} from '../core/platform/index';\nimport'rxjs/add/operator/first';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * Throws an error if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdTooltipInvalidPositionError(position: string) {\n  throw Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef;\n  _tooltipInstance: TooltipComponent;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    if (this._tooltipInstance) {\n      this._setTooltipMessage(this._message);\n    }\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _dir: Dir) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._setTooltipMessage(this._message);\n    this._tooltipInstance.show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = this._overlayRef.attach(portal).instance;\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance.afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): void {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.scrollStrategy = this._overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n\n    this._overlayRef = this._overlay.create(config);\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    this._overlayRef.dispose();\n    this._overlayRef = null;\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throwMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throwMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    this._tooltipInstance.message = message;\n    this._tooltipInstance._markForCheck();\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      if (this._tooltipInstance) {\n        this._overlayRef.updatePosition();\n      }\n    });\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipInstance.tooltipClass = tooltipClass;\n    this._tooltipInstance._markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throwMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\nprivate _xPosition: MenuPositionX = 'after';\nprivate _yPosition: MenuPositionY = 'below';\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = true;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void>();\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this._emitCloseEvent());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this._emitCloseEvent();\n        return;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * This emits a close event to which the trigger is subscribed. When emitted, the\n * trigger will close the menu.\n * @return {?}\n */\n_emitCloseEvent(): void {\n    this.close.emit();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  host: {'role': 'menu'},\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ElementRef} from '@angular/core';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nexport class MdMenuItemBase {}\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements Focusable, CanDisable {\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Used to set the HTML `disabled` attribute. Necessary for links to be disabled properly.\n * @return {?}\n */\n_getDisabledAttr(): boolean {\n    return this.disabled ? true : null;\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': '_getDisabledAttr()',\n    '(click)': '_checkDisabled($event)',\n  },\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('showing', style({\n    opacity: 1,\n    transform: `scale(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      transform: `scale(0)`\n    }),\n    animate(`200ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('50ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate(`200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewContainerRef,\n} from '@angular/core';\nimport {MdMenuPanel} from './menu-panel';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {\n    isFakeMousedownFromScreenReader,\n    Dir,\n    LayoutDirection,\n    Overlay,\n    OverlayState,\n    OverlayRef,\n    TemplatePortal,\n    ConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    VerticalConnectionPos,\n} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal;\nprivate _overlayRef: OverlayRef;\nprivate _menuOpen: boolean = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) { }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n    this.menu.close.subscribe(() => this.closeMenu());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() { this.destroyMenu(); }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean { return this._menuOpen; }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay();\n      this._overlayRef.attach(this._portal);\n      this._subscribeToBackdrop();\n      this._initMenu();\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this._backdropSubscription.unsubscribe();\n      this._resetMenu();\n    }\n  }\n/**\n * Removes the menu from the DOM.\n * @return {?}\n */\ndestroyMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n\n      this._cleanUpSubscriptions();\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * This method ensures that the menu closes when the overlay backdrop is clicked.\n * We do not use first() here because doing so would not catch clicks from within\n * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n * explicitly when the menu is closed or destroyed.\n * @return {?}\n */\nprivate _subscribeToBackdrop(): void {\n    this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n      this.menu._emitCloseEvent();\n    });\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n  }\n/**\n *  This method checks that a valid instance of MdMenu has been passed into\n *  mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n *  This method creates the overlay from the provided menu's template and saves its\n *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): void {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition()\n                                        .withDirection(this.dir);\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe((change) => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n      let /** @type {?} */ posY: MenuPositionY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n\n      if (!this.menu.overlapTrigger) {\n        posY = posY === 'below' ? 'above' : 'below';\n      }\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy  {\n    const [posX, fallbackX]: HorizontalConnectionPos[] =\n      this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, fallbackOverlayY]: VerticalConnectionPos[] =\n      this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let /** @type {?} */ originY = overlayY;\n    let /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n      .connectedTo(this._element,\n          {originX: posX, originY: originY}, {overlayX: posX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: originY},\n          {overlayX: fallbackX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: posX, originY: fallbackOriginY},\n          {overlayX: posX, overlayY: fallbackOverlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: fallbackOriginY},\n          {overlayX: fallbackX, overlayY: fallbackOverlayY});\n  }\n/**\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(click)': 'toggleMenu()',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._backdropSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {AnimationEvent} from '@angular/animations';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport'rxjs/add/operator/filter';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose: boolean = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer) {\n    _containerInstance._onAnimationStateChange\n      .filter((event: AnimationEvent) => event.toState === 'exit')\n      .subscribe(() => this._overlayRef.dispose(), null, () => {\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._state = 'exit';\n    this._overlayRef.detachBackdrop(); // Transition the backdrop in parallel with the dialog.\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector, InjectionToken} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nexport class DialogInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _dialogRef\n * @param {?} _data\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _dialogRef: MdDialogRef<any>,\nprivate _data: any) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === MdDialogRef) {\n      return this._dialogRef;\n    }\n\n    if (token === MD_DIALOG_DATA) {\n      return this._data;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction DialogInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogInjector.prototype._parentInjector;\n/** @type {?} */\nDialogInjector.prototype._dialogRef;\n/** @type {?} */\nDialogInjector.prototype._data;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {LayoutDirection} from '../core';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: LayoutDirection = 'ltr';\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement = null;\n/**\n * Reference to the global document object.\n */\nprivate _document: Document;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits the current animation state whenever it changes.\n */\n_onAnimationStateChange = new EventEmitter<AnimationEvent>();\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _document\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\n      _document: any) {\n\n    super();\n    this._document = _document;\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && 'focus' in toFocus) {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    this._onAnimationStateChange.emit(event);\n\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n      this._onAnimationStateChange.complete();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    '[attr.role]': '_config?.role',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * Reference to the global document object.\n * @type {?}\n */\nMdDialogContainer.prototype._document;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector, ComponentRef, Injectable, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  Overlay,\n  OverlayRef,\n  ComponentType,\n  OverlayState,\n  ComponentPortal,\n} from '../core';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Gets an observable that is notified when a dialog has been opened.\n */\nafterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n */\nafterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    let /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ overlayState = new OverlayState();\n    overlayState.panelClass = dialogConfig.panelClass;\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.block();\n    overlayState.direction = dialogConfig.direction;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ viewContainer = config ? config.viewContainerRef : null;\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    let /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    // We create an injector specifically for the component we're instantiating so that it can\n    // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n    // and, optionally, to return a value.\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));\n    } else {\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, null, dialogInjector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n    let /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n/**\n * Dialog close input for compatibility mode.\n * @param {?} value\n * @return {?}\n */\nset _matDialogClose(value: any) { this.dialogResult = value; }\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close],' +\n            'button[mdDialogClose], button[matDialogClose]',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {'class': 'mat-dialog-title'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,' +\n            '[mdDialogContent], [matDialogContent]',\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,' +\n            '[mdDialogActions], [matDialogActions]',\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  OverlayModule,\n  PortalModule,\n  A11yModule,\n  MdCommonModule,\n} from '../core';\nimport {MdDialog} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MdDialog} from './dialog';\nexport {throwMdDialogContentAlreadyAttachedError,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\nexport {MD_DIALOG_DATA} from './dialog-injector';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n */\npositionY: AutocompletePositionY = 'below';\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: (value: any) => string;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display\n * options below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this.onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    // Note: we shouldn't use `this` inside the zone callback,\n    // because it can cause a memory leak.\n    const /** @type {?} */ onExit = this.onExit;\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      onExit.next();\n      onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * The message to be shown in the snack bar.\n */\nmessage: string;\n/**\n * The label for the button in the snack bar.\n */\naction: string;\n/**\n * The instance of the component making up the content of the snack bar.\n */\nsnackBarRef: MdSnackBarRef<SimpleSnackBar>;\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    this.snackBarRef._action();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * The message to be shown in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.message;\n/**\n * The label for the button in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.action;\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any>;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> {\n    return this._parentSnackBar ?\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any>) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\n      });\n    }\n\n    this._live.announce(config.announcementMessage, config.politeness);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config: MdSnackBarConfig = {}): MdSnackBarRef<SimpleSnackBar> {\n    config.announcementMessage = message;\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    // The snackbar animation needs the content to be resolved in order to transform the bar\n    // out of the view initially (so it can slide in). To make the content resolve, we manually\n    // detect changes.\n    containerRef.changeDetectorRef.detectChanges();\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.direction = config.direction;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {MdTab} from './tab';\nimport'rxjs/add/operator/map';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup {\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = null;\n/**\n * Whether the tab group should grow to the size of the active tab\n */\nprivate _dynamicHeight: boolean = false;\n/**\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * Whether ripples for the tab-group should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\nprivate _selectedIndex: number = null;\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return this.selectChange.map(event => event.index);\n  }\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _onAddLayer: EventEmitter<any> = new EventEmitter<any>();\n/**\n * @return {?}\n */\nget addLayer(): Observable<any> {\n    return this._onAddLayer.asObservable();\n  }\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n */\nconstructor(private _renderer: Renderer2) {\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(this._indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - this._indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = this._indexToSelect - this._selectedIndex;\n      }\n    });\n\n    this._selectedIndex = this._indexToSelect;\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\n_addLayer($event: any) {\n    this._onAddLayer.emit($event);\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'disableRipple': [{ type: Input },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n'addLayer': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Whether the tab group should grow to the size of the active tab\n * @type {?}\n */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._disableRipple;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._onAddLayer;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule, PortalModule, MdCommonModule, LIVE_ANNOUNCER_PROVIDER} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '../core';\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends TemplatePortalDirective {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {MdTabLabel} from './tab-label';\nexport class MdTabBase {}\nexport const /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);\nexport class MdTab extends _MdTabMixinBase implements OnInit, CanDisable {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal { return this._contentPortal; }\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nexport class MdTabLabelWrapperBase {}\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    this._ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'left',\n            this._getLeftPosition(element));\n        this._renderer.setStyle(this._elementRef.nativeElement, 'width',\n            this._getElementWidth(element));\n      });\n    });\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Generates the pixel distance from the left based on the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getLeftPosition(element: HTMLElement): string {\n    return element ? element.offsetLeft + 'px' : '0';\n  }\n/**\n * Generates the pixel width from the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementWidth(element: HTMLElement): string {\n    return element ? element.offsetWidth + 'px' : '0';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective, Dir, LayoutDirection} from '../core';\nimport'rxjs/add/operator/map';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _dir\n * @param {?} _elementRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _elementRef: ElementRef) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._dir;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {RIGHT_ARROW, LEFT_ARROW, ENTER, Dir, LayoutDirection, coerceBooleanProperty} from '../core';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable} from 'rxjs/Observable';\nimport {applyCssTransform} from '../core/style/apply-transform';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/auditTime';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader implements AfterContentChecked, AfterContentInit, OnDestroy {\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription = null;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Whether ripples for the tab-header labels should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _dir\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _dir: Dir) { }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.dirChange : Observable.of(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          Observable.fromEvent(window, 'resize').auditTime(10) :\n          Observable.of(null);\n\n      return Observable.merge(dirChange, resize).startWith(null).subscribe(() => {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    let /** @type {?} */ translateX = this.scrollDistance + 'px';\n    if (this._getLayoutDirection() == 'ltr') {\n      translateX = '-' + translateX;\n    }\n\n    applyCssTransform(this._tabList.nativeElement, `translate3d(${translateX}, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance;  }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers\n        ? this._labelWrappers.toArray()[labelIndex]\n        :  null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    this._showPaginationControls =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!this._showPaginationControls) {\n      this.scrollDistance = 0;\n    }\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n        ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n        : null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/** @type {?} */\nMdTabHeader.prototype._disableRipple;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._ngZone;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PortalModule} from '../core';\nimport {MdRippleModule} from '../core/ripple/index';\nimport {ObserveContentModule} from '../core/observe-content/observe-content';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabNav, MdTabLink, MdTabLinkRipple} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {MdTabHeader} from './tab-header';\nimport {ScrollDispatchModule} from '../core/overlay/scroll/index';\nimport {DndModule} from 'ng2-dnd/index';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserveContentModule,\n    ScrollDispatchModule,\n    DndModule.forRoot(),\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNav,\n    MdTabLink,\n    MdTabLinkRipple\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNav,\n    MdTabLink,\n    MdTabBody,\n    MdTabLinkRipple,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\nexport {MdTabNav, MdTabLink} from './tab-nav-bar/index';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, SecurityContext, Optional, SkipSelf} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/forkJoin';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/operator/finally';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n                   'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    if (this._iconSetConfigs.has(namespace)) {\n      this._iconSetConfigs.get(namespace).push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (this._cachedIconsByUrl.has(url)) {\n      return Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));\n    }\n    return this._loadSvgIconFromConfig(new SvgIconConfig(url))\n        .do(svg => this._cachedIconsByUrl.set(url, svg))\n        .map(svg => cloneSvg(svg));\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    if (this._svgIconConfigs.has(key)) {\n      return this._getSvgFromConfig(this._svgIconConfigs.get(key));\n    }\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n    return Observable.throw(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return Observable.of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config)\n          .do(svg => config.svgElement = svg)\n          .map(svg => cloneSvg(svg));\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return Observable.of(namedIcon);\n    }\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n        .filter(iconSetConfig => !iconSetConfig.svgElement)\n        .map(iconSetConfig =>\n            this._loadSvgIconSetFromConfig(iconSetConfig)\n                .catch((err: any): Observable<SVGElement> => {\n                  let /** @type {?} */ url =\n                      this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n                  // Swallow errors fetching individual URLs so the combined Observable won't\n                  // necessarily fail.\n                  console.log(`Loading icon set URL: ${url} failed: ${err}`);\n                  return Observable.of(null);\n                })\n                .do(svg => {\n                  // Cache SVG element.\n                  if (svg) {\n                    iconSetConfig.svgElement = svg;\n                  }\n                }));\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return Observable.forkJoin(iconSetFetchRequests)\n        .map(() => {\n          const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n          if (!foundIcon) {\n            throw getMdIconNameNotFoundError(name);\n          }\n          return foundIcon;\n        });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .map(svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url)\n        .map(svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    if (this._inProgressUrlFetches.has(url)) {\n      return this._inProgressUrlFetches.get(url);\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = /** @type {?} */(( <Observable<string>> this._http.get(url)\n        .map(response => response.text())\n        .finally(() => {\n          this._inProgressUrlFetches.delete(url);\n        })\n        .share()));\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n\nexport const /** @type {?} */ ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChange,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: {[propertyName: string]: SimpleChange}) {\n    const /** @type {?} */ changedInputs = Object.keys(changes);\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    // Remove existing child nodes and add the new SVG element.\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\n    layoutElement.innerHTML = '';\n    this._renderer.appendChild(layoutElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number) {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputContainerUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by md-input-container.`);\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdInputContainerDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerMissingMdInputError(): Error {\n  return Error('md-input-container must contain an mdInput directive. ' +\n                   'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  HostBinding,\n  Input,\n} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },{ type: HostBinding, args: ['attr.mode', ] },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\n\nexport {MdProgressBar} from './progress-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n  Inject\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty, Platform} from '../core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  getMdInputContainerDuplicatedHintError,\n  getMdInputContainerMissingMdInputError,\n  getMdInputContainerPlaceholderConflictError,\n  getMdInputContainerUnsupportedTypeError\n} from './input-container-errors';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from '../core/placeholder/placeholder-options';\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n */\nid: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-input-error'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\n/**\n * Whether the element is focused or not.\n */\nfocused = false;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n */\nariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n */\n_placeholderChange = new EventEmitter<string>();\n/**\n * Whether the input is empty.\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\npublic _ngControl: NgControl,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Whether the input is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._ngControl;\n    const /** @type {?} */ isInvalid = control && control.invalid;\n    const /** @type {?} */ isTouched = control && control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw getMdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._platform;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n/** @type {?} */\nMdInputDirective.prototype._parentForm;\n/** @type {?} */\nMdInputDirective.prototype._parentFormGroup;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the input divider, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the input's underline element.\n */\nunderlineRef: ElementRef;\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n      placeholderOptions: PlaceholderOptions) {\n      this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n      this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateInputChild();\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateInputChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    let /** @type {?} */ input = this._mdInputChild;\n    return (this._errorChildren.length > 0 && input._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw getMdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint = null;\n      let /** @type {?} */ endHint: MdHint = null;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    if (this._mdInputChild) {\n      let /** @type {?} */ ids: string[] = [];\n      let /** @type {?} */ startHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'start') : null;\n      let /** @type {?} */ endHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'end') : null;\n\n      if (startHint) {\n        ids.push(startHint.id);\n      } else if (this._hintLabel) {\n        ids.push(this._hintLabelId);\n      }\n\n      if (endHint) {\n        ids.push(endHint.id);\n      }\n\n      this._mdInputChild.ariaDescribedby = ids.join(' ');\n    }\n  }\n/**\n * Throws an error if the container's input child was removed.\n * @return {?}\n */\nprivate _validateInputChild() {\n    if (!this._mdInputChild) {\n      throw getMdInputContainerMissingMdInputError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    'class': 'mat-input-container',\n    '[class.mat-input-invalid]': '_mdInputChild._isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/** @type {?} */\nMdInputContainer.prototype._placeholderOptions;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/** @type {?} */\nMdInputContainer.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/**\n * Reference to the input's underline element.\n * @type {?}\n */\nMdInputContainer.prototype.underlineRef;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._elementRef;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit} from '@angular/core';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {AriaLivePoliteness, LayoutDirection} from '../core';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef = null;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: LayoutDirection = 'ltr';\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\nprivate _instance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * @return {?}\n */\nget instance(): T {\n    return this._instance;\n  }\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened: Subject<any>;\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction: Subject<any> = new Subject();\n/**\n * @param {?} instance\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(instance: T,\n              containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\n_action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarRef.prototype._instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty, MdLine, MdLineSetter} from '../core';\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\nexport class MdList {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect should be disabled on the list-items or not.\n * This flag only has an effect for `md-nav-list` components.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n/** @type {?} */\nMdList.propDecorators;\n/** @type {?} */\nMdList.prototype._disableRipple;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem implements AfterContentInit {\nprivate _lineSetter: MdLineSetter;\nprivate _disableRipple: boolean = false;\nprivate _isNavList: boolean = false;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that are\n * part of a nav list. The value of `disableRipple` on the `md-nav-list` overrides this flag.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._disableRipple;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdRippleModule, MdCommonModule} from '../core';\nimport {\n  MdList,\n  MdListItem,\n  MdListDivider,\n  MdListAvatarCssMatStyler,\n  MdListIconCssMatStyler,\n  MdListCssMatStyler,\n  MdNavListCssMatStyler,\n  MdDividerCssMatStyler,\n  MdListSubheaderCssMatStyler,\n} from './list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit, Directive\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Dir} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Dir) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                      `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string]): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    'class': 'mat-grid-list',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-title, mat-card-title, [md-card-title], [mat-card-title],' +\n  '[mdCardTitle], [matCardTitle]',\n  host: {\n    'class': 'mat-card-title '\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],' +\n  '[mdCardSubtitle], [matCardSubtitle]',\n  host: {\n    'class': 'mat-card-subtitle '\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {'class': 'mat-card-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements Focusable, OnDestroy, CanColor, CanDisable {\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    (this.selected ? this.select : this.deselect).emit({chip: this});\n  }\n  protected _selected: boolean = false;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?} Whether the chip is selected.\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this.onFocus.emit({chip: this});\n  }\n/**\n * The aria-disabled state for the chip\n * @return {?}\n */\n_isAriaDisabled(): string {\n    return String(this.disabled);\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': '_isAriaDisabled()',\n    '(click)': '_handleClick($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_hasFocus = false',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._selected;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {SPACE, LEFT_ARROW, RIGHT_ARROW, TAB} from '../core/keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit, OnDestroy {\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprivate _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription: Subscription;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = 0);\n    });\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._tabOutSubscription) {\n      this._tabOutSubscription.unsubscribe();\n    }\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Programmatically focus the chip list. This in turn focuses the first\n * non-disabled chip in this chip list.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip.\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n    if (target && target.classList.contains('mat-chip')) {\n      switch (event.keyCode) {\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this._toggleSelectOnFocusedChip();\n          }\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n          break;\n        case LEFT_ARROW:\n          this._keyManager.setPreviousItemActive();\n          event.preventDefault();\n          break;\n        case RIGHT_ARROW:\n          this._keyManager.setNextItemActive();\n          event.preventDefault();\n          break;\n        default:\n          this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Toggles the selected state of the currently focused chip.\n * @return {?}\n */\nprotected _toggleSelectOnFocusedChip(): void {\n    // Allow disabling of chip selection\n    if (!this.selectable) {\n      return;\n    }\n\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedChip: MdChip = this.chips.toArray()[focusedIndex];\n\n      if (focusedChip) {\n        focusedChip.toggleSelected();\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and check focus\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        // Check whether the chip is the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    // Properties\n    '[attr.tabindex]': '_tabIndex',\n    'role': 'listbox',\n    'class': 'mat-chip-list',\n\n    // Events\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._subscribed;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdChip, MdBasicChip} from './chip';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip} from './chip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  FocusOrigin,\n  FocusOriginMonitor,\n  HammerInput,\n  MdRipple,\n  RippleRef,\n  Platform,\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextId = 0;\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase = mixinColor(mixinDisabled(MdSlideToggleBase), 'accent');\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase\n    implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId = `md-slide-toggle-${++nextId}`;\nprivate _checked: boolean = false;\nprivate _slideRenderer: SlideToggleRenderer = null;\nprivate _required: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * Name value will be applied to the input element if present\n */\nname: string = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the ripple effect for this slide-toggle is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * The onChangeEvent method will be also called on click.\n * This is because everything for the slide-toggle is wrapped inside of a label,\n * which triggers a onChange event on click.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.dragging) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Whether the slide-toggle is checked.\n * @return {?}\n */\nget checked() { return !!this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits the change event to the `change` output EventEmitter\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._disableRipple;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} platform\n */\nconstructor(private _elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  FOCUS_ORIGIN_MONITOR_PROVIDER,\n  GestureConfig,\n  MdCommonModule,\n  MdRippleModule,\n  PlatformModule,\n} from '../core';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdRippleModule, MdCommonModule, PlatformModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Dir} from '../core/rtl/dir';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop().length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    this._value = coerceNumberProperty(v, this._value);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string|number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n */\nprivate _renderer: SliderRenderer = null;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * The last value for which a change event was emitted.\n */\nprivate _lastChangeValue: number = null;\n/**\n * The last value for which an input event was emitted.\n */\nprivate _lastInputValue: number = null;\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Dir) {\n    super();\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number) {\n    return (value - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement.getBoundingClientRect();\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer2,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy, Inject,\n} from '@angular/core';\nimport {Dir, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport'rxjs/add/operator/first';\nimport {DOCUMENT} from '@angular/platform-browser';\n/**\n * Throws an exception when two MdSidenav are matching the same side.\n * @param {?} align\n * @return {?}\n */\nexport function throwMdDuplicatedSidenavError(align: string) {\n  throw Error(`A sidenav was already declared for 'align=\"${align}\"'`);\n}\n/**\n * Sidenav toggle promise result.\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n */\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the sidenav is opened.\n */\n_opened: boolean = false;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n */\nonOpenStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully opened.\n */\nonOpen = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n */\nonCloseStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully closed.\n */\nonClose = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav alignment changes.\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n */\nprivate _toggleAnimationPromise: Promise<MdSidenavToggleResult> = null;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n */\nprivate _resolveToggleAnimationPromise: (animationFinished: boolean) => void = null;\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n *     If not available we do not hook on transitions.\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeSidenavWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the sidenav, restores it to where it was before the sidenav\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeSidenavWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeSidenavWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n\n    // This can happen when the sidenav is set to opened in\n    // the template and the transition hasn't ended.\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n * rejected if it didn't).\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n * rejected if it didn't).\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n * close() when it's closed.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this.isFocusTrapEnabled;\n    }\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * When transition has finished, set the internal state for classes and emit the proper event.\n * The event passed is actually of type TransitionEvent, but that type is not available in\n * Android so we use any.\n * @param {?} transitionEvent\n * @return {?}\n */\n_onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nget _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isEnd() {\n    return this.align == 'end';\n  }\n/**\n * @return {?}\n */\nget _modeSide() {\n    return this.mode == 'side';\n  }\n/**\n * @return {?}\n */\nget _modeOver() {\n    return this.mode == 'over';\n  }\n/**\n * @return {?}\n */\nget _modePush() {\n    return this.mode == 'push';\n  }\n/**\n * @return {?}\n */\nget _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement = null;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    'class': 'mat-sidenav',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpenStart': [{ type: Output, args: ['open-start', ] },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onCloseStart': [{ type: Output, args: ['close-start', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onOpenStart;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onCloseStart;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._toggleAnimationPromise;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._resolveToggleAnimationPromise;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n/** @type {?} */\nMdSidenav.prototype._doc;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the sidenav backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The sidenav at the start/end alignment, independent of direction.\n */\nprivate _start: MdSidenav;\nprivate _end: MdSidenav;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdSidenav;\nprivate _right: MdSidenav;\n/**\n * Whether to enable open/close trantions.\n */\n_enableTransitions = false;\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.dirChange.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._enableTransitions = true);\n  }\n/**\n * Calls `open` of both start and end sidenavs\n * @return {?}\n */\npublic open() {\n    return Promise.all([this._start, this._end].map(sidenav => sidenav && sidenav.open()));\n  }\n/**\n * Calls `close` of both start and end sidenavs\n * @return {?}\n */\npublic close() {\n    return Promise.all([this._start, this._end].map(sidenav => sidenav && sidenav.close()));\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(false));\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    sidenav.onAlignChanged.subscribe(() =>\n        this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-sidenav-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-sidenav-opened');\n    }\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let /** @type {?} */ sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => sidenav.close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n        || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'side');\n  }\n/**\n * @return {?}\n */\n_getMarginRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'side');\n  }\n/**\n * @return {?}\n */\n_getPositionLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'push');\n  }\n/**\n * @return {?}\n */\n_getPositionRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'push');\n  }\n/**\n * Returns the horizontal offset for the content area.  There should never be a value for both\n * left and right, so by subtracting the right value from the left value, we should always get\n * the appropriate offset.\n * @return {?}\n */\n_getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n/**\n * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n * doesn't seem to work right now.\n * @return {?}\n */\n_getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    'class': 'mat-sidenav-container',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Whether to enable open/close trantions.\n * @type {?}\n */\nMdSidenavContainer.prototype._enableTransitions;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {RtlModule} from '../core/rtl/dir';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule, MdCommonModule, StyleModule, RtlModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {OverlayModule} from '../core/overlay/overlay-directives';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton> = null;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this.selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is diabled\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = value;\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      let /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(MdRadioButtonBase, 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor {\n/**\n * The unique ID for the radio button.\n */\nid: string = `md-radio-${_uniqueIdCounter++}`;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether the ripple effect for this radio button is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    _radioDispatcher.listen((id: string, name: string) => {\n      if (id != this.id && name == this.name) {\n        this.checked = false;\n      }\n    });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    let /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disableRipple': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disableRipple;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, TAB} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * This interface is for items that can be disabled. The type passed into\n * ListKeyManager must extend this interface.\n */\nexport interface CanDisable {\n  disabled?: boolean;\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends CanDisable> {\nprivate _activeItemIndex: number = null;\nprivate _activeItem: T;\nprivate _tabOut = new Subject<void>();\nprivate _wrap: boolean = false;\n/**\n * @param {?} _items\n */\nconstructor(private _items: QueryList<T>) {\n  }\n/**\n * Turns on wrapping mode, which ensures that the active item will wrap to\n * the other end of list when there are no more items in the given direction.\n * \n * @return {?} The ListKeyManager that the method was called on.\n */\nwithWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n/**\n * Sets the active item to the item at the index specified.\n * \n * @param {?} index The index of the item to be set as active.\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    this._activeItemIndex = index;\n    this._activeItem = this._items.toArray()[index];\n  }\n/**\n * Sets the active item depending on the key event passed in.\n * @param {?} event Keyboard event to be used for determining which element should be active.\n * @return {?}\n */\nonKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        this.setNextItemActive();\n        break;\n      case UP_ARROW:\n        this.setPreviousItemActive();\n        break;\n      case TAB:\n        // Note that we shouldn't prevent the default action on tab.\n        this._tabOut.next(null);\n        return;\n      default:\n        return;\n    }\n\n    event.preventDefault();\n  }\n/**\n * Returns the index of the currently active item.\n * @return {?}\n */\nget activeItemIndex(): number {\n    return this._activeItemIndex;\n  }\n/**\n * Returns the currently active item.\n * @return {?}\n */\nget activeItem(): T {\n    return this._activeItem;\n  }\n/**\n * Sets the active item to the first enabled item in the list.\n * @return {?}\n */\nsetFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n/**\n * Sets the active item to the last enabled item in the list.\n * @return {?}\n */\nsetLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n/**\n * Sets the active item to the next enabled item in the list.\n * @return {?}\n */\nsetNextItemActive(): void {\n    this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n/**\n * Sets the active item to a previous enabled item in the list.\n * @return {?}\n */\nsetPreviousItemActive(): void {\n    this._activeItemIndex === null && this._wrap ? this.setLastItemActive()\n                                                 : this._setActiveItemByDelta(-1);\n  }\n/**\n * Allows setting of the activeItemIndex without any other effects.\n * @param {?} index The new activeItemIndex.\n * @return {?}\n */\nupdateActiveItemIndex(index: number) {\n    this._activeItemIndex = index;\n  }\n/**\n * Observable that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n * @return {?}\n */\nget tabOut(): Observable<void> {\n    return this._tabOut.asObservable();\n  }\n/**\n * This method sets the active item, given a list of items and the delta between the\n * currently active item and the new active item. It will calculate differently\n * depending on whether wrap mode is turned on.\n * @param {?} delta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n    this._wrap ? this._setActiveInWrapMode(delta, items)\n               : this._setActiveInDefaultMode(delta, items);\n  }\n/**\n * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n * down the list until it finds an item that is not disabled, and it will wrap if it\n * encounters either end of the list.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInWrapMode(delta: number, items: T[]): void {\n    // when active item would leave menu, wrap to beginning or end\n    this._activeItemIndex =\n      (this._activeItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an enabled one is reached\n    if (items[this._activeItemIndex].disabled) {\n      this._setActiveInWrapMode(delta, items);\n    } else {\n      this.setActiveItem(this._activeItemIndex);\n    }\n  }\n/**\n * Sets the active item properly given the default mode. In other words, it will\n * continue to move down the list until it finds an item that is not disabled. If\n * it encounters either end of the list, it will stop and not wrap.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInDefaultMode(delta: number, items: T[]): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n  }\n/**\n * Sets the active item to the first enabled item starting at the index specified. If the\n * item is disabled, it will move in the fallbackDelta direction until it either\n * finds an enabled item or encounters the end of the list.\n * @param {?} index\n * @param {?} fallbackDelta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByIndex(index: number, fallbackDelta: number,\n                                  items = this._items.toArray()): void {\n    if (!items[index]) { return; }\n    while (items[index].disabled) {\n      index += fallbackDelta;\n      if (!items[index]) { return; }\n    }\n    this.setActiveItem(index);\n  }\n\n}\n\nfunction ListKeyManager_tsickle_Closure_declarations() {\n/** @type {?} */\nListKeyManager.prototype._activeItemIndex;\n/** @type {?} */\nListKeyManager.prototype._activeItem;\n/** @type {?} */\nListKeyManager.prototype._tabOut;\n/** @type {?} */\nListKeyManager.prototype._wrap;\n/** @type {?} */\nListKeyManager.prototype._items;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","\n/**\n * Returns an exception to be thrown when attempting to change a s\n * elect's `multiple` option after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect} from './select';\nimport {MdCommonModule, OverlayModule, MdOptionModule} from '../core';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\nexport class MdButtonToggleGroupBase {}\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase implements AfterViewInit,\n    ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle = null;\n/**\n * Whether the button toggle group is initialized or not.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle> = null;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit {\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = null;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = null;\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      _buttonToggleDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-button-toggle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  MdCommonModule,\n  StyleModule,\n} from '../core';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdCommonModule, StyleModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  Inject\n} from '@angular/core';\nimport {coerceBooleanProperty, FocusOriginMonitor, Platform} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(MdButtonBase));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect for this button is disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableRipple(v) { this._disableRipple = coerceBooleanProperty(v); }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n            'button[md-fab], button[md-mini-fab],' +\n            'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n            'button[mat-fab], button[mat-mini-fab]',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/** @type {?} */\nMdButton.propDecorators;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdButton.prototype._disableRipple;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusOriginMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusOriginMonitor: FocusOriginMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusOriginMonitor);\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return this.disabled ? 'true' : 'false';\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n/** @type {?} */\nMdAnchor.propDecorators;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdMiniFab,\n  MdButtonCssMatStyler,\n  MdFab,\n  MdIconButtonCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {FocusOrigin, FocusOriginMonitor, MdRipple, RippleRef} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nlet nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase = mixinColor(mixinDisabled(MdCheckboxBase), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase\n    implements ControlValueAccessor, AfterViewInit, OnDestroy, CanColor, CanDisable {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string = null;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n */\nid: string = `md-checkbox-${++nextId}`;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * Whether the ripple effect for this checkbox is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * ID of the native input element inside `<md-checkbox>`\n * @return {?}\n */\nget inputId(): string {\n    return `input-${this.id}`;\n  }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string;\n\n    switch (oldState) {\n    case TransitionCheckState.Init:\n      // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n      // [checked] bound to it.\n      if (newState === TransitionCheckState.Checked) {\n        animSuffix = 'unchecked-checked';\n      } else if (newState == TransitionCheckState.Indeterminate) {\n        animSuffix = 'unchecked-indeterminate';\n      } else {\n        return '';\n      }\n      break;\n    case TransitionCheckState.Unchecked:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'unchecked-checked' : 'unchecked-indeterminate';\n      break;\n    case TransitionCheckState.Checked:\n      animSuffix = newState === TransitionCheckState.Unchecked ?\n          'checked-unchecked' : 'checked-indeterminate';\n      break;\n    case TransitionCheckState.Indeterminate:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'indeterminate-checked' : 'indeterminate-unchecked';\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdCheckbox.prototype._disableRipple;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule, MdCommonModule, FocusOriginMonitor, ObserveContentModule} from '../core';\nimport {MdCheckbox} from './checkbox';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserveContentModule],\n  exports: [MdCheckbox, MdCommonModule],\n  declarations: [MdCheckbox],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox} from './checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\ntype ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint = null;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair = null;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        // Notify that the position has been changed along with its change properties.\n        const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n        const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n        this._onPositionChange.next(positionChange);\n\n        return Promise.resolve(null);\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, fallbackPoint, fallbackPosition);\n\n    return Promise.resolve(null);\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea?: number;\n  fitsInViewport?: boolean;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?} value New top offset.\n * @return {?}\n */\ntop(value: string): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New left offset.\n * @return {?}\n */\nleft(value: string): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?} value New bottom offset.\n * @return {?}\n */\nbottom(value: string): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New right offset.\n * @return {?}\n */\nright(value: string): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?} value New width for the overlay\n * @return {?}\n */\nwidth(value: string): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?} value New height for the overlay\n * @return {?}\n */\nheight(value: string): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    if (!this._wrapper) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n\n    return Promise.resolve(null);\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n  Provider,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {ScrollStrategy, ScrollStrategyOptions} from './scroll/index';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} scrollStrategies\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(public scrollStrategies: ScrollStrategyOptions,\nprivate _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) { }\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    let /** @type {?} */ scrollStrategy = state.scrollStrategy || this.scrollStrategies.noop();\n    let /** @type {?} */ portalHost = this._createPortalHost(pane);\n    return new OverlayRef(portalHost, pane, state, scrollStrategy, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollStrategyOptions, },\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype.scrollStrategies;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n/**\n * Providers for Overlay and its related injectables.\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    NgModule,\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef,\n    Renderer2,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport {Overlay, OVERLAY_PROVIDERS} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Dir, LayoutDirection} from '../rtl/dir';\nimport {Scrollable} from './scroll/scrollable';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {ESCAPE} from '../keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatchModule} from './scroll/index';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nlet defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener: Function;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = this._overlay.scrollStrategies.reposition();\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n    overlayConfig.scrollStrategy = this.scrollStrategy;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'scrollStrategy': [{ type: Input },],\n'open': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Platform} from '../platform/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {Platform} from '../platform/platform';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\n\nimport'rxjs/add/operator/first';\n/**\n * Class that allows for trapping focus within a DOM element.\n * \n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport class FocusTrap {\nprivate _startAnchor: HTMLElement;\nprivate _endAnchor: HTMLElement;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this._enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset enabled(val: boolean) {\n    this._enabled = val;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n    }\n  }\nprivate _enabled: boolean = true;\n/**\n * @param {?} _element\n * @param {?} _platform\n * @param {?} _checker\n * @param {?} _ngZone\n * @param {?=} deferAnchors\n */\nconstructor(\nprivate _element: HTMLElement,\nprivate _platform: Platform,\nprivate _checker: InteractivityChecker,\nprivate _ngZone: NgZone,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n/**\n * Destroys the focus trap by cleaning up the anchors.\n * @return {?}\n */\ndestroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n/**\n * Inserts the anchors into the DOM. This is usually done automatically\n * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n * @return {?}\n */\nattachAnchors(): void {\n    // If we're not on the browser, there can be no focus to trap.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    if (!this._startAnchor) {\n      this._startAnchor = this._createAnchor();\n    }\n\n    if (!this._endAnchor) {\n      this._endAnchor = this._createAnchor();\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this._startAnchor.addEventListener('focus', () => this.focusLastTabbableElement());\n      this._endAnchor.addEventListener('focus', () => this.focusFirstTabbableElement());\n\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n    });\n  }\n/**\n * Waits for the zone to stabilize, then either focuses the first element that the\n * user specified, or the first tabbable element..\n * @return {?}\n */\nfocusInitialElementWhenReady() {\n    this._executeOnStable(() => this.focusInitialElement());\n  }\n/**\n * Waits for the zone to stabilize, then focuses\n * the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElementWhenReady() {\n    this._executeOnStable(() => this.focusFirstTabbableElement());\n  }\n/**\n * Waits for the zone to stabilize, then focuses\n * the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElementWhenReady() {\n    this._executeOnStable(() => this.focusLastTabbableElement());\n  }\n/**\n * Get the specified boundary element of the trapped region.\n * @param {?} bound The boundary to get (start or end of trapped region).\n * @return {?} The boundary element.\n */\nprivate _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let /** @type {?} */ markers = /** @type {?} */(( this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>));\n\n    for (let /** @type {?} */ i = 0; i < markers.length; i++) {\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}',` +\n                     ` use 'cdk-focus-region-${bound}' instead.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n/**\n * Focuses the element that should be focused when the focus trap is initialized.\n * @return {?}\n */\nfocusInitialElement() {\n    let /** @type {?} */ redirectToElement = /** @type {?} */(( this._element.querySelector('[cdk-focus-initial]') as HTMLElement));\n    if (redirectToElement) {\n      redirectToElement.focus();\n    } else {\n      this.focusFirstTabbableElement();\n    }\n  }\n/**\n * Focuses the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElement() {\n    let /** @type {?} */ redirectToElement = this._getRegionBoundary('start');\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Focuses the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElement() {\n    let /** @type {?} */ redirectToElement = this._getRegionBoundary('end');\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Get the first tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getFirstTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = 0; i < children.length; i++) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getFirstTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Get the last tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getLastTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getLastTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Creates an anchor element.\n * @return {?}\n */\nprivate _createAnchor(): HTMLElement {\n    let /** @type {?} */ anchor = document.createElement('div');\n    anchor.tabIndex = this._enabled ? 0 : -1;\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n/**\n * Executes a function when the zone is stable.\n * @param {?} fn\n * @return {?}\n */\nprivate _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.first().subscribe(fn);\n    }\n  }\n}\n\nfunction FocusTrap_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrap.prototype._startAnchor;\n/** @type {?} */\nFocusTrap.prototype._endAnchor;\n/** @type {?} */\nFocusTrap.prototype._enabled;\n/** @type {?} */\nFocusTrap.prototype._element;\n/** @type {?} */\nFocusTrap.prototype._platform;\n/** @type {?} */\nFocusTrap.prototype._checker;\n/** @type {?} */\nFocusTrap.prototype._ngZone;\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nexport class FocusTrapFactory {\n/**\n * @param {?} _checker\n * @param {?} _platform\n * @param {?} _ngZone\n */\nconstructor(\nprivate _checker: InteractivityChecker,\nprivate _platform: Platform,\nprivate _ngZone: NgZone) { }\n/**\n * @param {?} element\n * @param {?=} deferAnchors\n * @return {?}\n */\ncreate(element: HTMLElement, deferAnchors = false): FocusTrap {\n    return new FocusTrap(element, this._platform, this._checker, this._ngZone, deferAnchors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InteractivityChecker, },\n{type: Platform, },\n{type: NgZone, },\n];\n}\n\nfunction FocusTrapFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapFactory.ctorParameters;\n/** @type {?} */\nFocusTrapFactory.prototype._checker;\n/** @type {?} */\nFocusTrapFactory.prototype._platform;\n/** @type {?} */\nFocusTrapFactory.prototype._ngZone;\n}\n\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nexport class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget disabled(): boolean { return !this.focusTrap.enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {\n    this.focusTrap.enabled = !coerceBooleanProperty(val);\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-focus-trap',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction FocusTrapDeprecatedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDeprecatedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDeprecatedDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDeprecatedDirective.propDecorators;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._focusTrapFactory;\n}\n\n/**\n * Directive for trapping focus within a region.\n */\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this.focusTrap.enabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['cdkTrapFocus', ] },],\n};\n}\n\nfunction FocusTrapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDirective.propDecorators;\n/** @type {?} */\nFocusTrapDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDirective.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injectable,\n  InjectionToken,\n  Optional,\n  Inject,\n  SkipSelf,\n} from '@angular/core';\nimport {Platform} from '../platform/platform';\n\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement>('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\nexport class LiveAnnouncer {\nprivate _liveElement: Element;\n/**\n * @param {?} elementToken\n * @param {?} platform\n */\nconstructor(\n        elementToken: any,\n      platform: Platform) {\n    // Only do anything if we're on the browser platform.\n    if (platform.isBrowser) {\n      // We inject the live element as `any` because the constructor signature cannot reference\n      // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n      // causes TypeScript to preserve the constructor signature types.\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n  }\n/**\n * Announces a message to screenreaders.\n * @param {?} message Message to be announced to the screenreader\n * @param {?=} politeness The politeness of the announcer element\n * @return {?}\n */\nannounce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n/**\n * Removes the aria-live element from the DOM.\n * @return {?}\n */\n_removeLiveElement() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createLiveElement(): Element {\n    let /** @type {?} */ liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN, ] }, ]},\n{type: Platform, },\n];\n}\n\nfunction LiveAnnouncer_tsickle_Closure_declarations() {\n/** @type {?} */\nLiveAnnouncer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLiveAnnouncer.ctorParameters;\n/** @type {?} */\nLiveAnnouncer.prototype._liveElement;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} platform\n * @return {?}\n */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentDispatcher: LiveAnnouncer, liveElement: any, platform: Platform) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, platform);\n}\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    Platform,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FocusTrapDirective, FocusTrapDeprecatedDirective, FocusTrapFactory} from './focus-trap';\nimport {LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../platform/index';\nexport class A11yModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, PlatformModule],\n  declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  exports: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  providers: [InteractivityChecker, FocusTrapFactory, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A11yModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA11yModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA11yModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[];\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      this.onChange.next(eventData);\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener) {\n    this._listeners.push(listener);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const /** @type {?} */ UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to parse.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DateAdapter} from './date-adapter';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11 || date < 1) {\n      return null;\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to\n    // overflow.\n    if (result.getMonth() != month) {\n      return null;\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    let /** @type {?} */ timestamp = typeof value == 'number' ? value : Date.parse(value);\n    return isNaN(timestamp) ? null : new Date(timestamp);\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} s The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(s: string) {\n    return s.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MdDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const /** @type {?} */ MD_DATE_FORMATS = new InjectionToken<MdDateFormats>('md-date-formats');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule} from './line/line';\nimport {RtlModule} from './rtl/dir';\nimport {ObserveContentModule} from './observe-content/observe-content';\nimport {MdOptionModule} from './option/index';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/overlay-directives';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n\n// RTL\nexport {Dir, LayoutDirection, RtlModule} from './rtl/dir';\n\n// Mutation Observer\nexport {ObserveContentModule, ObserveContent} from './observe-content/observe-content';\n\nexport {MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './option/index';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './overlay/index';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox} from './selection/index';\n\n// Coercion\nexport {coerceBooleanProperty} from './coercion/boolean-property';\nexport {coerceNumberProperty} from './coercion/number-property';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule, MATERIAL_SANITY_CHECKS} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\n\n// Placeholder\nexport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from './placeholder/placeholder-options';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [CompatibilityModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  HostBinding,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n/**\n * Directive to listen for changes of direction of part of the DOM.\n * \n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nexport class Dir {\n/**\n * Layout direction of the element.\n */\n_dir: LayoutDirection = 'ltr';\n/**\n * Event emitted when the direction changes.\n */\ndirChange = new EventEmitter<void>();\n/**\n * \\@docs-private\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset dir(v: LayoutDirection) {\n    let /** @type {?} */ old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit();\n    }\n  }\n/**\n * Current layout direction of the element.\n * @return {?}\n */\nget value(): LayoutDirection { return this.dir; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: LayoutDirection) { this.dir = v; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_dir': [{ type: Input, args: ['dir', ] },],\n'dirChange': [{ type: Output },],\n'dir': [{ type: HostBinding, args: ['attr.dir', ] },],\n};\n}\n\nfunction Dir_tsickle_Closure_declarations() {\n/** @type {?} */\nDir.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDir.ctorParameters;\n/** @type {?} */\nDir.propDecorators;\n/**\n * Layout direction of the element.\n * @type {?}\n */\nDir.prototype._dir;\n/**\n * Event emitted when the direction changes.\n * @type {?}\n */\nDir.prototype.dirChange;\n}\n\nexport class RtlModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [Dir],\n  declarations: [Dir]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RtlModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRtlModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRtlModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '../platform/platform';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => this._triggerElement.removeEventListener(type, fn));\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst /** @type {?} */ hasV8BreakIterator = (typeof(Intl) !== 'undefined' && ( /** @type {?} */((Intl as any))).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nexport class Platform {\n  isBrowser: boolean = typeof document === 'object' && !!document;\n/**\n * Layout Engines\n */\nEDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  BLINK = this.isBrowser &&\n      (!!(( /** @type {?} */((window as any))).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  WEBKIT = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n/**\n * Browsers and Platform Types\n */\nIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Platform_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatform.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatform.ctorParameters;\n/** @type {?} */\nPlatform.prototype.isBrowser;\n/**\n * Layout Engines\n * @type {?}\n */\nPlatform.prototype.EDGE;\n/** @type {?} */\nPlatform.prototype.TRIDENT;\n/** @type {?} */\nPlatform.prototype.BLINK;\n/** @type {?} */\nPlatform.prototype.WEBKIT;\n/**\n * Browsers and Platform Types\n * @type {?}\n */\nPlatform.prototype.IOS;\n/** @type {?} */\nPlatform.prototype.FIREFOX;\n/** @type {?} */\nPlatform.prototype.ANDROID;\n/** @type {?} */\nPlatform.prototype.SAFARI;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Cached result Set of input types support by the current browser.\n */\nlet supportedInputTypes: Set<string>;\n/**\n * Types of <input> that *might* be supported.\n */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let /** @type {?} */ featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n\n  return supportedInputTypes;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '../../platform/index';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/auditTime';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    if (this.scrollableReferences.has(scrollable)) {\n      this.scrollableReferences.get(scrollable).unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      this._scrolled.asObservable().auditTime(auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return Observable.merge(\n          Observable.fromEvent(window.document, 'scroll'),\n          Observable.fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {Platform} from './platform';\nexport class PlatformModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [Platform]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PlatformModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformModule.ctorParameters;\n}\n\n\n\nexport {Platform} from './platform';\nexport {getSupportedInputTypes} from './features';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(null, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                  document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry?() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {Platform} from '../platform/platform';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\nprivate _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport'rxjs/add/observable/fromEvent';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(null, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../position/viewport-ruler';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: null, left: null };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left;\n      this._previousHTMLStyles.top = root.style.top;\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _config\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _config: RepositionScrollStrategyConfig) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      let /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ScrollStrategy} from './scroll-strategy';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {ViewportRuler} from '../position/viewport-ruler';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n/**\n * Options for how an overlay will handle scrolling.\n * \n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nexport class ScrollStrategyOptions {\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewportRuler: ViewportRuler) { }\n/**\n * Do nothing on scroll.\n */\nnoop = () => new NoopScrollStrategy();\n/**\n * Close the overlay as soon as the user scrolls.\n */\nclose = () => new CloseScrollStrategy(this._scrollDispatcher);\n/**\n * Block scrolling.\n */\nblock = () => new BlockScrollStrategy(this._viewportRuler);\n/**\n * Update the overlay's position on scroll.\n * @param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n */\nreposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n{type: ViewportRuler, },\n];\n}\n\nfunction ScrollStrategyOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollStrategyOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollStrategyOptions.ctorParameters;\n/**\n * Do nothing on scroll.\n * @type {?}\n */\nScrollStrategyOptions.prototype.noop;\n/**\n * Close the overlay as soon as the user scrolls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.close;\n/**\n * Block scrolling.\n * @type {?}\n */\nScrollStrategyOptions.prototype.block;\n/**\n * Update the overlay's position on scroll.\n * \\@param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.reposition;\n/** @type {?} */\nScrollStrategyOptions.prototype._scrollDispatcher;\n/** @type {?} */\nScrollStrategyOptions.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {ScrollDispatchModule} from '../overlay/scroll/index';\nimport {PlatformModule} from '../platform/index';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: string;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | null;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette = null;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, ContentChildren, QueryList, Input} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n */\nmultiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalHostAlreadyDisposedError() {\n  throw Error('This PortalHost has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalHost accepts either' +\n                  'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalHostError() {\n  throw Error('Attempting to attach a portal to a null PortalHost');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-privatew\n * @return {?}\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    throwNullPortalHostError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalHostAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\nimport {ComponentType} from '../overlay/generic-component-type';\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throwNullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n    if (host == null) {\n      throwNoPortalAttachedError();\n    }\n\n    this._attachedHost = null;\n    return host.detach();\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector: Injector;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef: ViewContainerRef = null,\n      injector: Injector = null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<any>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n */\nlocals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any>;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: () => void;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    NgModule,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [cdkPortal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any>;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any>) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {LayoutDirection} from '../rtl/dir';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n */\npanelClass: string = '';\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection: LayoutDirection = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayState.prototype.scrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n * @type {?}\n */\nOverlayState.prototype.panelClass;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _scrollStrategy\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _scrollStrategy: ScrollStrategy,\nprivate _ngZone: NgZone) {\n\n    _scrollStrategy.attach(this);\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n    this._scrollStrategy.enable();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._state.panelClass) {\n      this._pane.classList.add(this._state.panelClass);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    this._scrollStrategy.disable();\n\n    let /** @type {?} */ detachmentResult = this._portalHost.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    return detachmentResult;\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n      this._scrollStrategy = null;\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._detachments.next();\n    this._detachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', this._state.direction);\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    this._backdropElement.classList.add(this._state.backdropClass);\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) {\n      this._pane.parentNode.appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n      backdropToDetach.classList.remove(this._state.backdropClass);\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._scrollStrategy;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * Check and return true if an object is type of string\n */\n/**\n * Check and return true if an object is type of string\n */ export function isString(obj) {\n    return typeof obj === \"string\";\n}\n/**\n * Check and return true if an object not undefined or null\n */\nexport function isPresent(obj) {\n    return obj !== undefined && obj !== null;\n}\n/**\n * Check and return true if an object is type of Function\n */\nexport function isFunction(obj) {\n    return typeof obj === \"function\";\n}\n/**\n * Create Image element with specified url string\n */\nexport function createImage(src) {\n    var img = new HTMLImageElement();\n    img.src = src;\n    return img;\n}\n/**\n * Call the function\n */\nexport function callFun(fun) {\n    return fun();\n}\n","// Copyright (C) 2016 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\nimport { Injectable } from '@angular/core';\nimport { DragDropConfig } from './dnd.config';\nimport { isPresent } from './dnd.utils';\nvar DragDropData = (function () {\n    function DragDropData() {\n    }\n    return DragDropData;\n}());\nexport { DragDropData };\nexport function dragDropServiceFactory() {\n    return new DragDropService();\n}\nvar DragDropService = (function () {\n    function DragDropService() {\n        this.allowedDropZones = [];\n    }\n    return DragDropService;\n}());\nexport { DragDropService };\nDragDropService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nDragDropService.ctorParameters = function () { return []; };\nexport function dragDropSortableServiceFactory(config) {\n    return new DragDropSortableService(config);\n}\nvar DragDropSortableService = (function () {\n    function DragDropSortableService(_config) {\n        this._config = _config;\n    }\n    Object.defineProperty(DragDropSortableService.prototype, \"elem\", {\n        get: function () {\n            return this._elem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DragDropSortableService.prototype.markSortable = function (elem) {\n        if (isPresent(this._elem)) {\n            this._elem.classList.remove(this._config.onSortableDragClass);\n        }\n        if (isPresent(elem)) {\n            this._elem = elem;\n            this._elem.classList.add(this._config.onSortableDragClass);\n        }\n    };\n    return DragDropSortableService;\n}());\nexport { DragDropSortableService };\nDragDropSortableService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nDragDropSortableService.ctorParameters = function () { return [\n    { type: DragDropConfig, },\n]; };\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matLine],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdLine],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '../../platform/index';\nimport {ScrollStrategyOptions} from './scroll-strategy-options';\n\nexport {Scrollable} from './scrollable';\nexport {ScrollDispatcher} from './scroll-dispatcher';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {ScrollStrategyOptions} from './scroll-strategy-options';\nexport {RepositionScrollStrategy} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\nexport class ScrollDispatchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER, ScrollStrategyOptions],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\n\nexport const /** @type {?} */ UP_ARROW = 38;\nexport const /** @type {?} */ DOWN_ARROW = 40;\nexport const /** @type {?} */ RIGHT_ARROW = 39;\nexport const /** @type {?} */ LEFT_ARROW = 37;\n\nexport const /** @type {?} */ PAGE_UP = 33;\nexport const /** @type {?} */ PAGE_DOWN = 34;\n\nexport const /** @type {?} */ HOME = 36;\nexport const /** @type {?} */ END = 35;\n\nexport const /** @type {?} */ ENTER = 13;\nexport const /** @type {?} */ SPACE = 32;\nexport const /** @type {?} */ TAB = 9;\n\nexport const /** @type {?} */ ESCAPE = 27;\nexport const /** @type {?} */ BACKSPACE = 8;\nexport const /** @type {?} */ DELETE = 46;\n","// Copyright (C) 2016 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\nimport { isString } from './dnd.utils';\nvar DataTransferEffect = (function () {\n    function DataTransferEffect(name) {\n        this.name = name;\n    }\n    return DataTransferEffect;\n}());\nexport { DataTransferEffect };\nDataTransferEffect.COPY = new DataTransferEffect('copy');\nDataTransferEffect.LINK = new DataTransferEffect('link');\nDataTransferEffect.MOVE = new DataTransferEffect('move');\nDataTransferEffect.NONE = new DataTransferEffect('none');\nvar DragImage = (function () {\n    function DragImage(imageElement, x_offset, y_offset) {\n        if (x_offset === void 0) { x_offset = 0; }\n        if (y_offset === void 0) { y_offset = 0; }\n        this.imageElement = imageElement;\n        this.x_offset = x_offset;\n        this.y_offset = y_offset;\n        if (isString(this.imageElement)) {\n            // Create real image from string source\n            var imgScr = this.imageElement;\n            this.imageElement = new HTMLImageElement();\n            this.imageElement.src = imgScr;\n        }\n    }\n    return DragImage;\n}());\nexport { DragImage };\nvar DragDropConfig = (function () {\n    function DragDropConfig() {\n        this.onDragStartClass = \"dnd-drag-start\";\n        this.onDragEnterClass = \"dnd-drag-enter\";\n        this.onDragOverClass = \"dnd-drag-over\";\n        this.onSortableDragClass = \"dnd-sortable-drag\";\n        this.dragEffect = DataTransferEffect.MOVE;\n        this.dropEffect = DataTransferEffect.MOVE;\n        this.dragCursor = \"move\";\n        this.defaultCursor = \"pointer\";\n    }\n    return DragDropConfig;\n}());\nexport { DragDropConfig };\n","// Copyright (C) 2016 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\nimport { Injectable, ChangeDetectorRef } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { DragDropConfig } from './dnd.config';\nimport { DragDropService } from './dnd.service';\nimport { isString, isFunction, isPresent, createImage, callFun } from './dnd.utils';\nvar AbstractComponent = (function () {\n    function AbstractComponent(elemRef, _dragDropService, _config, _cdr) {\n        var _this = this;\n        this._dragDropService = _dragDropService;\n        this._config = _config;\n        this._cdr = _cdr;\n        /**\n         * Whether the object is draggable. Default is true.\n         */\n        this._dragEnabled = false;\n        /**\n         * Allows drop on this element\n         */\n        this.dropEnabled = false;\n        this.dropZones = [];\n        this.cloneItem = false;\n        // Assign default cursor unless overridden\n        this._defaultCursor = _config.defaultCursor;\n        this._elem = elemRef.nativeElement;\n        this._elem.style.cursor = this._defaultCursor; // set default cursor on our element\n        //\n        // DROP events\n        //\n        this._elem.ondragenter = function (event) {\n            _this._onDragEnter(event);\n        };\n        this._elem.ondragover = function (event) {\n            _this._onDragOver(event);\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.dropEffect = _this._config.dropEffect.name;\n            }\n            return false;\n        };\n        this._elem.ondragleave = function (event) {\n            _this._onDragLeave(event);\n        };\n        this._elem.ondrop = function (event) {\n            _this._onDrop(event);\n        };\n        //\n        // Drag events\n        //\n        this._elem.onmousedown = function (event) {\n            _this._target = event.target;\n        };\n        this._elem.ondragstart = function (event) {\n            if (_this._dragHandle) {\n                if (!_this._dragHandle.contains(_this._target)) {\n                    event.preventDefault();\n                    return;\n                }\n            }\n            _this._onDragStart(event);\n            //\n            if (event.dataTransfer != null) {\n                event.dataTransfer.setData('text', '');\n                // Change drag effect\n                event.dataTransfer.effectAllowed = _this.effectAllowed || _this._config.dragEffect.name;\n                // Change drag image\n                if (isPresent(_this.dragImage)) {\n                    if (isString(_this.dragImage)) {\n                        event.dataTransfer.setDragImage(createImage(_this.dragImage));\n                    }\n                    else if (isFunction(_this.dragImage)) {\n                        event.dataTransfer.setDragImage(callFun(_this.dragImage));\n                    }\n                    else {\n                        var img = _this.dragImage;\n                        event.dataTransfer.setDragImage(img.imageElement, img.x_offset, img.y_offset);\n                    }\n                }\n                else if (isPresent(_this._config.dragImage)) {\n                    var dragImage = _this._config.dragImage;\n                    event.dataTransfer.setDragImage(dragImage.imageElement, dragImage.x_offset, dragImage.y_offset);\n                }\n                else if (_this.cloneItem) {\n                    _this._dragHelper = _this._elem.cloneNode(true);\n                    _this._dragHelper.classList.add('dnd-drag-item');\n                    _this._dragHelper.style.position = \"absolute\";\n                    _this._dragHelper.style.top = \"0px\";\n                    _this._dragHelper.style.left = \"-1000px\";\n                    _this._elem.parentElement.appendChild(_this._dragHelper);\n                    event.dataTransfer.setDragImage(_this._dragHelper, event.offsetX, event.offsetY);\n                }\n                // Change drag cursor\n                var cursorelem = (_this._dragHandle) ? _this._dragHandle : _this._elem;\n                if (_this._dragEnabled) {\n                    cursorelem.style.cursor = _this.effectCursor ? _this.effectCursor : _this._config.dragCursor;\n                }\n                else {\n                    cursorelem.style.cursor = _this._defaultCursor;\n                }\n            }\n        };\n        this._elem.ondragend = function (event) {\n            if (_this._elem.parentElement && _this._dragHelper) {\n                _this._elem.parentElement.removeChild(_this._dragHelper);\n            }\n            // console.log('ondragend', event.target);\n            _this._onDragEnd(event);\n            // Restore style of dragged element\n            var cursorelem = (_this._dragHandle) ? _this._dragHandle : _this._elem;\n            cursorelem.style.cursor = _this._defaultCursor;\n        };\n    }\n    Object.defineProperty(AbstractComponent.prototype, \"dragEnabled\", {\n        get: function () {\n            return this._dragEnabled;\n        },\n        set: function (enabled) {\n            this._dragEnabled = !!enabled;\n            this._elem.draggable = this._dragEnabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractComponent.prototype.setDragHandle = function (elem) {\n        this._dragHandle = elem;\n    };\n    /******* Change detection ******/\n    AbstractComponent.prototype.detectChanges = function () {\n        var _this = this;\n        // Programmatically run change detection to fix issue in Safari\n        setTimeout(function () {\n            _this._cdr.detectChanges();\n        }, 250);\n    };\n    //****** Droppable *******//\n    AbstractComponent.prototype._onDragEnter = function (event) {\n        // console.log('ondragenter._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragEnterCallback(event);\n        }\n    };\n    AbstractComponent.prototype._onDragOver = function (event) {\n        // // console.log('ondragover._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // The element is over the same source element - do nothing\n            if (event.preventDefault) {\n                // Necessary. Allows us to drop.\n                event.preventDefault();\n            }\n            this._onDragOverCallback(event);\n        }\n    };\n    AbstractComponent.prototype._onDragLeave = function (event) {\n        // console.log('ondragleave._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            // event.preventDefault();\n            this._onDragLeaveCallback(event);\n        }\n    };\n    AbstractComponent.prototype._onDrop = function (event) {\n        // Necessary. Allows us to drop.\n        this._preventAndStop(event);\n        // console.log('ondrop._isDropAllowed', this._isDropAllowed);\n        if (this._isDropAllowed(event)) {\n            this._onDropCallback(event);\n            this.detectChanges();\n        }\n    };\n    AbstractComponent.prototype._isDropAllowed = function (event) {\n        if ((this._dragDropService.isDragged || (event.dataTransfer && event.dataTransfer.files)) && this.dropEnabled) {\n            // First, if `allowDrop` is set, call it to determine whether the\n            // dragged element can be dropped here.\n            if (this.allowDrop) {\n                return this.allowDrop(this._dragDropService.dragData);\n            }\n            // Otherwise, use dropZones if they are set.\n            if (this.dropZones.length === 0 && this._dragDropService.allowedDropZones.length === 0) {\n                return true;\n            }\n            for (var i = 0; i < this._dragDropService.allowedDropZones.length; i++) {\n                var dragZone = this._dragDropService.allowedDropZones[i];\n                if (this.dropZones.indexOf(dragZone) !== -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    AbstractComponent.prototype._preventAndStop = function (event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n    };\n    //*********** Draggable **********//\n    AbstractComponent.prototype._onDragStart = function (event) {\n        //console.log('ondragstart.dragEnabled', this._dragEnabled);\n        if (this._dragEnabled) {\n            this._dragDropService.allowedDropZones = this.dropZones;\n            // console.log('ondragstart.allowedDropZones', this._dragDropService.allowedDropZones);\n            this._onDragStartCallback(event);\n        }\n    };\n    AbstractComponent.prototype._onDragEnd = function (event) {\n        this._dragDropService.allowedDropZones = [];\n        // console.log('ondragend.allowedDropZones', this._dragDropService.allowedDropZones);\n        this._onDragEndCallback(event);\n    };\n    //**** Drop Callbacks ****//\n    AbstractComponent.prototype._onDragEnterCallback = function (event) { };\n    AbstractComponent.prototype._onDragOverCallback = function (event) { };\n    AbstractComponent.prototype._onDragLeaveCallback = function (event) { };\n    AbstractComponent.prototype._onDropCallback = function (event) { };\n    //**** Drag Callbacks ****//\n    AbstractComponent.prototype._onDragStartCallback = function (event) { };\n    AbstractComponent.prototype._onDragEndCallback = function (event) { };\n    return AbstractComponent;\n}());\nexport { AbstractComponent };\nAbstractComponent.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nAbstractComponent.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: DragDropService, },\n    { type: DragDropConfig, },\n    { type: ChangeDetectorRef, },\n]; };\nvar AbstractHandleComponent = (function () {\n    function AbstractHandleComponent(elemRef, _dragDropService, _config, _Component, _cdr) {\n        this._dragDropService = _dragDropService;\n        this._config = _config;\n        this._Component = _Component;\n        this._cdr = _cdr;\n        this._elem = elemRef.nativeElement;\n        this._Component.setDragHandle(this._elem);\n    }\n    return AbstractHandleComponent;\n}());\nexport { AbstractHandleComponent };\n","// Copyright (C) 2016 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Directive, Input, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { AbstractComponent, AbstractHandleComponent } from './abstract.component';\nimport { DragDropConfig } from './dnd.config';\nimport { DragDropService } from './dnd.service';\nvar DraggableComponent = (function (_super) {\n    __extends(DraggableComponent, _super);\n    function DraggableComponent(elemRef, dragDropService, config, cdr) {\n        var _this = _super.call(this, elemRef, dragDropService, config, cdr) || this;\n        /**\n         * Callback function called when the drag actions happened.\n         */\n        _this.onDragStart = new EventEmitter();\n        _this.onDragEnd = new EventEmitter();\n        /**\n         * Callback function called when the drag action ends with a valid drop action.\n         * It is activated after the on-drop-success callback\n         */\n        _this.onDragSuccessCallback = new EventEmitter();\n        _this._defaultCursor = _this._elem.style.cursor;\n        _this.dragEnabled = true;\n        return _this;\n    }\n    Object.defineProperty(DraggableComponent.prototype, \"draggable\", {\n        set: function (value) {\n            this.dragEnabled = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DraggableComponent.prototype, \"dropzones\", {\n        set: function (value) {\n            this.dropZones = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DraggableComponent.prototype, \"effectallowed\", {\n        /**\n         * Drag allowed effect\n         */\n        set: function (value) {\n            this.effectAllowed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DraggableComponent.prototype, \"effectcursor\", {\n        /**\n         * Drag effect cursor\n         */\n        set: function (value) {\n            this.effectCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DraggableComponent.prototype._onDragStartCallback = function (event) {\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        this._elem.classList.add(this._config.onDragStartClass);\n        //\n        this.onDragStart.emit({ dragData: this.dragData, mouseEvent: event });\n    };\n    DraggableComponent.prototype._onDragEndCallback = function (event) {\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        this._elem.classList.remove(this._config.onDragStartClass);\n        //\n        this.onDragEnd.emit({ dragData: this.dragData, mouseEvent: event });\n    };\n    return DraggableComponent;\n}(AbstractComponent));\nexport { DraggableComponent };\nDraggableComponent.decorators = [\n    { type: Directive, args: [{ selector: '[dnd-draggable]' },] },\n];\n/** @nocollapse */\nDraggableComponent.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: DragDropService, },\n    { type: DragDropConfig, },\n    { type: ChangeDetectorRef, },\n]; };\nDraggableComponent.propDecorators = {\n    'draggable': [{ type: Input, args: [\"dragEnabled\",] },],\n    'onDragStart': [{ type: Output },],\n    'onDragEnd': [{ type: Output },],\n    'dragData': [{ type: Input },],\n    'onDragSuccessCallback': [{ type: Output, args: [\"onDragSuccess\",] },],\n    'dropzones': [{ type: Input, args: [\"dropZones\",] },],\n    'effectallowed': [{ type: Input, args: [\"effectAllowed\",] },],\n    'effectcursor': [{ type: Input, args: [\"effectCursor\",] },],\n    'dragImage': [{ type: Input },],\n    'cloneItem': [{ type: Input },],\n};\nvar DraggableHandleComponent = (function (_super) {\n    __extends(DraggableHandleComponent, _super);\n    function DraggableHandleComponent(elemRef, dragDropService, config, _Component, cdr) {\n        return _super.call(this, elemRef, dragDropService, config, _Component, cdr) || this;\n    }\n    return DraggableHandleComponent;\n}(AbstractHandleComponent));\nexport { DraggableHandleComponent };\nDraggableHandleComponent.decorators = [\n    { type: Directive, args: [{ selector: '[dnd-draggable-handle]' },] },\n];\n/** @nocollapse */\nDraggableHandleComponent.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: DragDropService, },\n    { type: DragDropConfig, },\n    { type: DraggableComponent, },\n    { type: ChangeDetectorRef, },\n]; };\n","// Copyright (C) 2016 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Directive, Input, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { AbstractComponent } from './abstract.component';\nimport { DragDropConfig } from './dnd.config';\nimport { DragDropService } from './dnd.service';\nvar DroppableComponent = (function (_super) {\n    __extends(DroppableComponent, _super);\n    function DroppableComponent(elemRef, dragDropService, config, cdr) {\n        var _this = _super.call(this, elemRef, dragDropService, config, cdr) || this;\n        /**\n         * Callback function called when the drop action completes correctly.\n         * It is activated before the on-drag-success callback.\n         */\n        _this.onDropSuccess = new EventEmitter();\n        _this.onDragEnter = new EventEmitter();\n        _this.onDragOver = new EventEmitter();\n        _this.onDragLeave = new EventEmitter();\n        _this.dropEnabled = true;\n        return _this;\n    }\n    Object.defineProperty(DroppableComponent.prototype, \"droppable\", {\n        set: function (value) {\n            this.dropEnabled = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DroppableComponent.prototype, \"allowdrop\", {\n        set: function (value) {\n            this.allowDrop = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DroppableComponent.prototype, \"dropzones\", {\n        set: function (value) {\n            this.dropZones = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DroppableComponent.prototype, \"effectallowed\", {\n        /**\n         * Drag allowed effect\n         */\n        set: function (value) {\n            this.effectAllowed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DroppableComponent.prototype, \"effectcursor\", {\n        /**\n         * Drag effect cursor\n         */\n        set: function (value) {\n            this.effectCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DroppableComponent.prototype._onDragEnterCallback = function (event) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragEnterClass);\n            this.onDragEnter.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });\n        }\n    };\n    DroppableComponent.prototype._onDragOverCallback = function (event) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.add(this._config.onDragOverClass);\n            this.onDragOver.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });\n        }\n    };\n    ;\n    DroppableComponent.prototype._onDragLeaveCallback = function (event) {\n        if (this._dragDropService.isDragged) {\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n            this.onDragLeave.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });\n        }\n    };\n    ;\n    DroppableComponent.prototype._onDropCallback = function (event) {\n        var dataTransfer = event.dataTransfer;\n        if (this._dragDropService.isDragged || (dataTransfer && dataTransfer.files)) {\n            this.onDropSuccess.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });\n            if (this._dragDropService.onDragSuccessCallback) {\n                this._dragDropService.onDragSuccessCallback.emit({ dragData: this._dragDropService.dragData, mouseEvent: event });\n            }\n            this._elem.classList.remove(this._config.onDragOverClass);\n            this._elem.classList.remove(this._config.onDragEnterClass);\n        }\n    };\n    return DroppableComponent;\n}(AbstractComponent));\nexport { DroppableComponent };\nDroppableComponent.decorators = [\n    { type: Directive, args: [{ selector: '[dnd-droppable]' },] },\n];\n/** @nocollapse */\nDroppableComponent.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: DragDropService, },\n    { type: DragDropConfig, },\n    { type: ChangeDetectorRef, },\n]; };\nDroppableComponent.propDecorators = {\n    'droppable': [{ type: Input, args: [\"dropEnabled\",] },],\n    'onDropSuccess': [{ type: Output },],\n    'onDragEnter': [{ type: Output },],\n    'onDragOver': [{ type: Output },],\n    'onDragLeave': [{ type: Output },],\n    'allowdrop': [{ type: Input, args: [\"allowDrop\",] },],\n    'dropzones': [{ type: Input, args: [\"dropZones\",] },],\n    'effectallowed': [{ type: Input, args: [\"effectAllowed\",] },],\n    'effectcursor': [{ type: Input, args: [\"effectCursor\",] },],\n};\n","// Copyright (C) 2016 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Directive, Input, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { AbstractComponent, AbstractHandleComponent } from './abstract.component';\nimport { DragDropConfig } from './dnd.config';\nimport { DragDropService, DragDropSortableService } from './dnd.service';\nvar SortableContainer = (function (_super) {\n    __extends(SortableContainer, _super);\n    function SortableContainer(elemRef, dragDropService, config, cdr, _sortableDataService) {\n        var _this = _super.call(this, elemRef, dragDropService, config, cdr) || this;\n        _this._sortableDataService = _sortableDataService;\n        _this._sortableData = [];\n        _this.dragEnabled = false;\n        return _this;\n    }\n    Object.defineProperty(SortableContainer.prototype, \"draggable\", {\n        set: function (value) {\n            this.dragEnabled = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SortableContainer.prototype, \"sortableData\", {\n        get: function () {\n            return this._sortableData;\n        },\n        set: function (sortableData) {\n            this._sortableData = sortableData;\n            //\n            this.dropEnabled = !!this._sortableData;\n            // console.log(\"collection is changed, drop enabled: \" + this.dropEnabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SortableContainer.prototype, \"dropzones\", {\n        set: function (value) {\n            this.dropZones = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortableContainer.prototype._onDragEnterCallback = function (event) {\n        if (this._sortableDataService.isDragged) {\n            var item = this._sortableDataService.sortableContainer._sortableData[this._sortableDataService.index];\n            // Check does element exist in sortableData of this Container\n            if (this._sortableData.indexOf(item) === -1) {\n                // Let's add it\n                // console.log('Container._onDragEnterCallback. drag node [' + this._sortableDataService.index.toString() + '] over parent node');\n                // Remove item from previouse list\n                this._sortableDataService.sortableContainer._sortableData.splice(this._sortableDataService.index, 1);\n                if (this._sortableDataService.sortableContainer._sortableData.length === 0) {\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\n                }\n                // Add item to new list\n                this._sortableData.unshift(item);\n                this._sortableDataService.sortableContainer = this;\n                this._sortableDataService.index = 0;\n            }\n            // Refresh changes in properties of container component\n            this.detectChanges();\n        }\n    };\n    return SortableContainer;\n}(AbstractComponent));\nexport { SortableContainer };\nSortableContainer.decorators = [\n    { type: Directive, args: [{ selector: '[dnd-sortable-container]' },] },\n];\n/** @nocollapse */\nSortableContainer.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: DragDropService, },\n    { type: DragDropConfig, },\n    { type: ChangeDetectorRef, },\n    { type: DragDropSortableService, },\n]; };\nSortableContainer.propDecorators = {\n    'draggable': [{ type: Input, args: [\"dragEnabled\",] },],\n    'sortableData': [{ type: Input },],\n    'dropzones': [{ type: Input, args: [\"dropZones\",] },],\n};\nvar SortableComponent = (function (_super) {\n    __extends(SortableComponent, _super);\n    function SortableComponent(elemRef, dragDropService, config, _sortableContainer, _sortableDataService, cdr) {\n        var _this = _super.call(this, elemRef, dragDropService, config, cdr) || this;\n        _this._sortableContainer = _sortableContainer;\n        _this._sortableDataService = _sortableDataService;\n        /**\n         * Callback function called when the drag action ends with a valid drop action.\n         * It is activated after the on-drop-success callback\n         */\n        _this.onDragSuccessCallback = new EventEmitter();\n        _this.onDragStartCallback = new EventEmitter();\n        _this.onDragOverCallback = new EventEmitter();\n        _this.onDragEndCallback = new EventEmitter();\n        _this.onDropSuccessCallback = new EventEmitter();\n        _this.dropZones = _this._sortableContainer.dropZones;\n        _this.dragEnabled = true;\n        _this.dropEnabled = true;\n        return _this;\n    }\n    Object.defineProperty(SortableComponent.prototype, \"draggable\", {\n        set: function (value) {\n            this.dragEnabled = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SortableComponent.prototype, \"droppable\", {\n        set: function (value) {\n            this.dropEnabled = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SortableComponent.prototype, \"effectallowed\", {\n        /**\n         * Drag allowed effect\n         */\n        set: function (value) {\n            this.effectAllowed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SortableComponent.prototype, \"effectcursor\", {\n        /**\n         * Drag effect cursor\n         */\n        set: function (value) {\n            this.effectCursor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortableComponent.prototype._onDragStartCallback = function (event) {\n        // console.log('_onDragStartCallback. dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = true;\n        this._sortableDataService.sortableContainer = this._sortableContainer;\n        this._sortableDataService.index = this.index;\n        this._sortableDataService.markSortable(this._elem);\n        // Add dragData\n        this._dragDropService.isDragged = true;\n        this._dragDropService.dragData = this.dragData;\n        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;\n        //\n        this.onDragStartCallback.emit(this._dragDropService.dragData);\n    };\n    SortableComponent.prototype._onDragOverCallback = function (event) {\n        if (this._sortableDataService.isDragged && this._elem !== this._sortableDataService.elem) {\n            // console.log('_onDragOverCallback. dragging elem with index ' + this.index);\n            this._sortableDataService.sortableContainer = this._sortableContainer;\n            this._sortableDataService.index = this.index;\n            this._sortableDataService.markSortable(this._elem);\n            this.onDragOverCallback.emit(this._dragDropService.dragData);\n        }\n    };\n    SortableComponent.prototype._onDragEndCallback = function (event) {\n        // console.log('_onDragEndCallback. end dragging elem with index ' + this.index);\n        this._sortableDataService.isDragged = false;\n        this._sortableDataService.sortableContainer = null;\n        this._sortableDataService.index = null;\n        this._sortableDataService.markSortable(null);\n        // Add dragGata\n        this._dragDropService.isDragged = false;\n        this._dragDropService.dragData = null;\n        this._dragDropService.onDragSuccessCallback = null;\n        //\n        this.onDragEndCallback.emit(this._dragDropService.dragData);\n    };\n    SortableComponent.prototype._onDragEnterCallback = function (event) {\n        if (this._sortableDataService.isDragged) {\n            this._sortableDataService.markSortable(this._elem);\n            if ((this.index !== this._sortableDataService.index) ||\n                (this._sortableDataService.sortableContainer.sortableData !== this._sortableContainer.sortableData)) {\n                // console.log('Component._onDragEnterCallback. drag node [' + this.index + '] over node [' + this._sortableDataService.index + ']');\n                // Get item\n                var item = this._sortableDataService.sortableContainer.sortableData[this._sortableDataService.index];\n                // Remove item from previouse list\n                this._sortableDataService.sortableContainer.sortableData.splice(this._sortableDataService.index, 1);\n                if (this._sortableDataService.sortableContainer.sortableData.length === 0) {\n                    this._sortableDataService.sortableContainer.dropEnabled = true;\n                }\n                // Add item to new list\n                this._sortableContainer.sortableData.splice(this.index, 0, item);\n                if (this._sortableContainer.dropEnabled) {\n                    this._sortableContainer.dropEnabled = false;\n                }\n                this._sortableDataService.sortableContainer = this._sortableContainer;\n                this._sortableDataService.index = this.index;\n            }\n        }\n    };\n    SortableComponent.prototype._onDropCallback = function (event) {\n        if (this._sortableDataService.isDragged) {\n            // console.log('onDropCallback.onDropSuccessCallback.dragData', this._dragDropService.dragData);\n            this.onDropSuccessCallback.emit(this._dragDropService.dragData);\n            if (this._dragDropService.onDragSuccessCallback) {\n                // console.log('onDropCallback.onDragSuccessCallback.dragData', this._dragDropService.dragData);\n                this._dragDropService.onDragSuccessCallback.emit(this._dragDropService.dragData);\n            }\n            // Refresh changes in properties of container component\n            this._sortableContainer.detectChanges();\n        }\n    };\n    return SortableComponent;\n}(AbstractComponent));\nexport { SortableComponent };\nSortableComponent.decorators = [\n    { type: Directive, args: [{ selector: '[dnd-sortable]' },] },\n];\n/** @nocollapse */\nSortableComponent.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: DragDropService, },\n    { type: DragDropConfig, },\n    { type: SortableContainer, },\n    { type: DragDropSortableService, },\n    { type: ChangeDetectorRef, },\n]; };\nSortableComponent.propDecorators = {\n    'index': [{ type: Input, args: ['sortableIndex',] },],\n    'draggable': [{ type: Input, args: [\"dragEnabled\",] },],\n    'droppable': [{ type: Input, args: [\"dropEnabled\",] },],\n    'dragData': [{ type: Input },],\n    'effectallowed': [{ type: Input, args: [\"effectAllowed\",] },],\n    'effectcursor': [{ type: Input, args: [\"effectCursor\",] },],\n    'onDragSuccessCallback': [{ type: Output, args: [\"onDragSuccess\",] },],\n    'onDragStartCallback': [{ type: Output, args: [\"onDragStart\",] },],\n    'onDragOverCallback': [{ type: Output, args: [\"onDragOver\",] },],\n    'onDragEndCallback': [{ type: Output, args: [\"onDragEnd\",] },],\n    'onDropSuccessCallback': [{ type: Output, args: [\"onDropSuccess\",] },],\n};\nvar SortableHandleComponent = (function (_super) {\n    __extends(SortableHandleComponent, _super);\n    function SortableHandleComponent(elemRef, dragDropService, config, _Component, cdr) {\n        return _super.call(this, elemRef, dragDropService, config, _Component, cdr) || this;\n    }\n    return SortableHandleComponent;\n}(AbstractHandleComponent));\nexport { SortableHandleComponent };\nSortableHandleComponent.decorators = [\n    { type: Directive, args: [{ selector: '[dnd-sortable-handle]' },] },\n];\n/** @nocollapse */\nSortableHandleComponent.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: DragDropService, },\n    { type: DragDropConfig, },\n    { type: SortableComponent, },\n    { type: ChangeDetectorRef, },\n]; };\n","// Copyright (C) 2016 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-dnd\nimport { NgModule } from \"@angular/core\";\nimport { DragDropConfig } from './src/dnd.config';\nimport { DragDropService, DragDropSortableService, dragDropServiceFactory, dragDropSortableServiceFactory } from './src/dnd.service';\nimport { DraggableComponent, DraggableHandleComponent } from './src/draggable.component';\nimport { DroppableComponent } from './src/droppable.component';\nimport { SortableContainer, SortableComponent, SortableHandleComponent } from './src/sortable.component';\nexport * from './src/abstract.component';\nexport * from './src/dnd.config';\nexport * from './src/dnd.service';\nexport * from './src/draggable.component';\nexport * from './src/droppable.component';\nexport * from './src/sortable.component';\nexport var providers = [\n    DragDropConfig,\n    { provide: DragDropService, useFactory: dragDropServiceFactory },\n    { provide: DragDropSortableService, useFactory: dragDropSortableServiceFactory, deps: [DragDropConfig] }\n];\nvar DndModule = (function () {\n    function DndModule() {\n    }\n    DndModule.forRoot = function () {\n        return {\n            ngModule: DndModule,\n            providers: providers\n        };\n    };\n    return DndModule;\n}());\nexport { DndModule };\nDndModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n                exports: [DraggableComponent, DraggableHandleComponent, DroppableComponent, SortableContainer, SortableComponent, SortableHandleComponent],\n            },] },\n];\n/** @nocollapse */\nDndModule.ctorParameters = function () { return []; };\n"],"names":["encapsulation","ViewEncapsulation","None","MdYearView","ctorParameters","type","DateAdapter","decorators","Optional","undefined","Inject","args","MD_DATE_FORMATS","propDecorators","activeDate","Input","selected","dateFilter","selectedChange","Output","MdDatepickerIntl","this","calendarLabel","openCalendarLabel","prevMonthLabel","prevYearLabel","MdCalendar","_elementRef","_intl","_ngZone","_isCompatibilityMode","_dateAdapter","_dateFormats","_this","EventEmitter","date","minDate","compareDate","maxDate","createMissingDateImplError","Object","defineProperty","prototype","enumerable","configurable","get","_monthView","format","_activeDate","display","monthYearLabel","toLocaleUpperCase","getYearName","switchToYearViewLabel","switchToMonthViewLabel","nextMonthLabel","nextYearLabel","_focusActiveCell","startView","emit","_currentPeriodClicked","addCalendarMonths","_nextEnabled","_isSameView","_handleCalendarBodyKeydownInYearView","event","runOutsideAngular","onStable","first","subscribe","nativeElement","querySelector","focus","getYear","date1","date2","_handleCalendarBodyKeydownInMonthView","addCalendarDays","getNumDaysInMonth","getDate","altKey","addCalendarYears","_dateFilterForViews","_dateSelected","preventDefault","keyCode","_nextMonthInSameCol","getMonth","_monthSelected","_prevMonthInSameCol","increment","Component","selector","changeDetection","ChangeDetectionStrategy","OnPush","startAt","datepickerUid","MdDatepickerContent","ngAfterContentInit","_calendar","_handleKeydown","datepicker","close","class","[class.mat-datepicker-content-touch]","ViewChild","MdDatepicker","_dialog","_dir","_selected","_startAt","_datepickerInput","value","min","ngOnDestroy","_inputSubscription","sameDate","oldValue","selectedChanged","_valueChange","Error","_document","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","opened","_dialogRef","config","MdDialogConfig","componentInstance","_calendarPortal","ComponentPortal","_viewContainerRef","_popupRef","hasAttached","overlayState","positionStrategy","_createPopupPositionStrategy","hasBackdrop","_overlay","create","position","connectedTo","getPopupConnectionElementRef","originX","originY","overlayX","overlayY","withFallbackPosition","template","MdDialog","Overlay","DOCUMENT","MD_DATEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MdDatepickerInput","multi","MD_DATEPICKER_VALIDATORS","NG_VALIDATORS","_renderer","_mdInputContainer","_onTouched","_cvaOnChange","_validatorOnChange","_minValidator","control","mdDatepickerMin","actual","max","mdDatepickerMax","mdDatepickerFilter","_validator","Validators","compose","_maxValidator","_filterValidator","set","mdDatepicker","filter","parse","dateInput","oldDate","setProperty","_min","_max","_datepicker","_datepickerSubscription","unsubscribe","registerOnValidatorChange","fn","validate","c","underlineRef","registerOnChange","registerOnTouched","setDisabledState","disabled","_onKeydown","open","_onInput","Directive","providers","host","[attr.aria-expanded]","[attr.max]","(blur)","MdMenuTrigger","destroyMenu","toggleMenu","_menuOpen","closeMenu","openMenu","_createOverlay","_overlayRef","attach","_portal","_subscribeToBackdrop","_initMenu","dispose","_cleanUpSubscriptions","_element","menu","focusFirstItem","_openedByMouse","_setIsMenuOpen","isOpen","onMenuOpen","onMenuClose","_checkMenu","throwMdMenuMissingError","_subscribeToPositions","_getOverlayConfig","scrollStrategy","scrollStrategies","reposition","_positionSubscription","onPositionChange","change","posX","connectionPair","posY","overlapTrigger","_getPosition","_a","xPosition","fallbackX","fallbackOriginY","fallbackOverlayY","(click)","exportAs","_deprecatedMdMenuTriggerFor","_deprecatedMatMenuTriggerFor","_matMenuTriggerFor","MdMenuModule","CommonModule","MdRippleModule","MdCommonModule","exports","MdMenu","MdMenuItem","declarations","MdDialogRef","_containerInstance","disableClose","_config","_onAnimationStateChange","toState","_state","detachBackdrop","afterClosed","_afterClosed","asObservable","updatePosition","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","updateSize","width","height","getState","DialogInjector","token","notFoundValue","_parentInjector","role","panelClass","backdropClass","direction","MdDialogContainer","_focusTrapFactory","_super","call","attachComponentPortal","portal","_portalHost","throwMdDialogContentAlreadyAttachedError","attachTemplatePortal","_restoreFocus","toFocus","_elementFocusedBeforeDialogWasOpened","_focusTrap","destroy","_savePreviouslyFocusedElement","_trapFocus","complete","styles","animations","trigger","state","style","transform","opacity","[attr.role]","[@slideDialog]","(@slideDialog.done)","NgZone","ElementRef","FocusTrapFactory","_injector","_location","_parentDialog","_openDialogsAtThisLevel","_afterOpenAtThisLevel","Subject","_boundKeydown","bind","afterOpen","_afterOpen","closeAll","componentOrTemplateRef","_openDialogs","length","next","dialogRef","i","_getOverlayState","dialogConfig","_attachDialogContainer","overlay","_attachDialogContent","dialogContainer","overlayRef","backdropClick","userInjector","viewContainerRef","injector","dialogInjector","data","TemplateRef","TemplatePortal","contentRef","instance","index","_afterAllClosed","topDialog","Injectable","Location","MdDialogClose","[attr.aria-label]","dialogResult","_matDialogClose","MdDialogTitle","MdDialogContent","MdDialogActions","MdDialogModule","NgModule","A11yModule","entryComponents","ActiveDescendantKeyManager","tslib_1.__extends","setActiveItem","Promise","resolve","then","activeItem","setInactiveStyles","ListKeyManager","MdAutocomplete","_changeDetectorRef","positionY","id","_uniqueAutocompleteIdCounter","_keyManager","options","withWrap","_setScrollTop","scrollTop","panel","_setVisibility","showPanel","markForCheck","_getClassList","mat-autocomplete-panel-below","mat-autocomplete-visible","mat-autocomplete-hidden","ChangeDetectorRef","ContentChildren","MdOption","displayWith","MD_AUTOCOMPLETE_VALUE_ACCESSOR","_zone","_inputContainer","_panelOpen","_manuallyFloatingPlaceholder","_onChange","autocomplete","_panelPositionSubscription","getMdAutocompleteMissingPanelError","_getHostWidth","_subscribeToClosingActions","_floatPlaceholder","detach","_resetPlaceholder","Observable","merge","optionSelections","tabOut","_outsideClickStream","MdAutocompleteTrigger","inputContainer","contains","clickTarget","overlayElement","panelOpen","closePanel","activeOption","_selectViaInteraction","isArrowKey_1","openPanel","prevActiveItem_1","_scrollToOption","_handleInput","document","target","floatPlaceholder","optionOffset","activeItemIndex","newScrollTop","Math","changes","switchMap","_resetPanel","panelClosingActions","_setValueAndClose","_destroyPanel","_setTriggerValue","toDisplay","source","_clearPreviousSelectedOption","forEach","option","skip","deselect","OverlayState","_getOverlayPosition","_subscribeToPositionChanges","getBoundingClientRect","_positionStrategy","recalculateLastPosition","aria-autocomplete","aria-multiline","[attr.aria-activedescendant]","(keydown)","MdInputContainer","Host","MdAutocompleteModule","MdOptionModule","MdCalendarCell","displayValue","ariaLabel","enabled","MdCalendarBody","allowDisabledSelection","activeCell","selectedValueChange","cell","rows","numCols","rowIndex","cellNumber","_firstRowOffset","labelMinRequiredCells","MdMonthView","firstDayOfWeek","getFirstDayOfWeek","weekdays","longWeekdays","map","long","narrow","narrowWeekdays","_weekdays","slice","concat","today","oldActiveDate","_selectedDate","_getDateInCurrentMonth","_init","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","firstOfMonth","_createWeekCells","daysInMonth","dateNames","getDateNames","_weeks","push","createDate","dateA11yLabel","_hasSameMonthAndYear","d1","d2","_selectedMonth","_getMonthInCurrentYear","month","_todayMonth","_yearLabel","monthNames","getMonthNames","_createCellForMonth","monthName","takeUntil","_onDestroy","_activeLinkChanged","MdTabNav","_alignInkBar","_activeLinkElement","_inkBar","alignToElement","Dir","MdTabLink","_mdTabNavBar","_isActive","updateActiveLink","active","MdTabLinkRipple","MdRipple","ViewportRuler","Platform","MD_RIPPLE_GLOBAL_OPTIONS","MdTabBody","onCentering","onCentered","_position","_getLayoutDirection","origin","ngOnInit","_origin","ngAfterViewChecked","_isCenterPosition","_content","_onTranslateTabStarted","e","clientHeight","_onTranslateTabComplete","transition","animate","PortalHostDirective","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollBefore","_selectedIndex","_disableRipple","MdTabHeader","coerceBooleanProperty","ngAfterContentChecked","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_focusNextTab","of","dirChange","resize","startWith","_updatePagination","_alignInkBarToSelectedTab","_checkPaginationEnabled","indexFocused","_setTabFocus","tab","_labelWrappers","toArray","tabIndex","_scrollToLabel","containerEl","_tabListContainer","dir","scrollWidth","offsetWidth","_moveFocus","translateX","applyCssTransform","_tabList","v","_getMaxScrollDistance","labelIndex","labelBeforePos","labelAfterPos","viewLength","selectedLabel","getOffsetLeft","getOffsetWidth","scrollDistance","beforeVisiblePos","afterVisiblePos","selectedLabelWrapper","selectedIndex","elementRef","MdTabLabelWrapper","MdTabsModule","imports","ScrollDispatchModule","MdTabGroup","MdTab","MdToolbarRow","MdToolbarBase","_MdToolbarMixinBase","mixinColor","MdToolbar","renderer","Renderer2","MdToolbarModule","MdTooltip","_scrollDispatcher","_platform","showDelay","IOS","listen","show","hide","_disposeTooltip","_disabled","_message","_tooltipInstance","_setTooltipMessage","_tooltipClass","_setTooltipClass","message","hideDelay","tooltipClass","_createTooltip","delay","_isTooltipVisible","TooltipComponent","afterHidden","isVisible","scrollThrottle","_getOrigin","isDirectionLtr","throwMdTooltipInvalidPositionError","_markForCheck","onMicrotaskEmpty","ScrollDispatcher","ViewContainerRef","_deprecatedMessage","_matClass","_visibility","_transformOrigin","_onHide","_hideTimeoutId","clearTimeout","_closeOnInteraction","_setTransformOrigin","_showTimeoutId","setTimeout","isLtr","_afterVisibilityAnimation","OverlayModule","MdMenuItemBase","_MdMenuItemMixinBase","mixinDisabled","_getTabIndex","_getDisabledAttr","_checkDisabled","inputs","[attr.tabindex]","[attr.aria-disabled]","[attr.disabled]","fadeInItems","_classList","_xPosition","throwMdMenuInvalidPositionX","setPositionClasses","_yPosition","classes","obj","FocusKeyManager","items","_emitCloseEvent","onKeydown","setFirstItemActive","yPosition","transformMenu","classList","ngAfterViewInit","_type","_placeholder","focused","MdInputDirective","_id","_uid","_required","_validateType","_isTextarea","getSupportedInputTypes","has","_isNeverEmpty","_cachedUid","nextUniqueId$1","_isErrorState","isInvalid","invalid","_parentForm","submitted","MD_INPUT_INVALID_TYPES","indexOf","getMdInputContainerUnsupportedTypeError","_neverEmptyInputTypes","[placeholder]","[required]","[attr.aria-describedby]","[attr.aria-invalid]","NgForm","FormGroupDirective","placeholder","required","placeholderOptions","_subscriptAnimationState","_hintLabel","color","_processHints","_placeholderOptions","float","_validateInputChild","_validatePlaceholders","_hintChildren","_mdInputChild","_placeholderChange","detectChanges","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_focusInput","_getDisplayedMessages","input","getMdInputContainerPlaceholderConflictError","_validateHints","endHint_1","startHint_1","hintLabel","hint","align","endHint","ids","[class.ng-untouched]","[class.ng-invalid]","ContentChild","_prefixChildren","MdPrefix","_suffixChildren","MdSuffix","MdTextareaAutosize","_minRows","_maxRows","maxRows","_setTextareaStyle","minHeight","_cachedLineHeight","maxHeight","_cacheTextareaLineHeight","resizeToFitContent","property","textareaClone","visibility","border","padding","textarea","parentNode","appendChild","removeChild","_setMinHeight","(input)","_matAutosizeMinRows","_matAutosizeMaxRows","MdInputModule","MdErrorDirective","MdHint","MdPlaceholder","MdSnackBarConfig","politeness","MdSnackBarRef","containerInstance","_onAction","_instance","onAction","dismiss","_open","_afterOpened","closed","_finishDismiss","afterOpened","_onEnter","MdSnackBarContainer","cssClass","_i","addClass","_completeExit","onEnter_1","onEnter","run","enter","_onExit","onExit","BasePortalHost","SimpleSnackBar","snackBarRef","_action","MdSnackBar","_live","_parentSnackBar","_snackBarRefAtThisLevel","_applyConfigDefaults","_openedSnackBarRef","afterDismissed","simpleSnackBarRef","action","containerRef","containerPortal","snackBarConfig","_attachSnackbarContent","component","container","state$$1","global","LiveAnnouncer","SkipSelf","MdSnackBarModule","PortalModule","LIVE_ANNOUNCER_PROVIDER","MdTabLabel","TemplatePortalDirective","MdTabBase","textLabel","_contentPortal","templateLabel","MdTabChangeEvent","_isInitialized","_indexToSelect","headerPosition","focusChange","selectChange","_onAddLayer","_groupId","nextId$2","_dynamicHeight","_tabs","_createChangeEvent","_focusChanged","_addLayer","$event","_getTabLabelId","_setTabBodyWrapperHeight","tabHeight","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_tabBodyWrapperHeight","setStyle","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","_dynamicHeightDeprecated","MdTabLabelWrapperBase","offsetLeft","_MdTabLabelWrapperMixinBase","MdInkBar","requestAnimationFrame","_getElementWidth","element","_getLeftPosition","MdGridListModule","MdGridTile","MdGridTileFooterCssMatStyler","MdGridAvatarCssMatStyler","MdGridTileText","MdCardTitle","MdCardSubtitle","MdCardActions","MdCardFooter","MdCardImage","MdCardSmImage","MdCardMdImage","MdCardLgImage","MdCardXlImage","MdCardAvatar","MdCard","MdCardHeader","MdCardTitleGroup","MdCardModule","MdCardContent","MdChipBase","_MdChipMixinBase","MdBasicChip","MdChip","_hasFocus","onFocus","select","toggleSelected","(focus)","MdChipList","_subscribed","WeakMap","_tabIndex","chips","_tabOutSubscription","_keydown","selectable","_toggleSelectOnFocusedChip","setPreviousItemActive","setNextItemActive","focusedIndex","_isValidIndex","focusedChip","chip","chipIndex","MdChipsModule","SvgIconConfig","MdIconRegistry","_http","_sanitizer","_cachedIconsByUrl","Map","_inProgressUrlFetches","_fontCssClassesByAlias","addSvgIconInNamespace","iconName","url","namespace","_svgIconConfigs","key","addSvgIconSet","addSvgIconSetInNamespace","_iconSetConfigs","registerFontClassAlias","alias","className","setDefaultFontSetClass","_defaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","cloneSvg","_loadSvgIconFromConfig","do","svg","iconKey","name","_getSvgFromConfig","throw","getMdIconNameNotFoundError","svgElement","foundIcon","_extractSvgIconFromSet","_fetchUrl","_loadSvgIconSetFromConfig","svgText","_svgElementFromString","responseText","iconSet","_setSvgAttributes","iconNode","cloneNode","_toSvgElement","div","createElement","innerHTML","str","childNodes","nodeType","Node","ELEMENT_NODE","getAttribute","setAttribute","req","response","text","finally","delete","ICON_REGISTRY_PROVIDER","MdIconBase","_MdIconMixinBase","MdIcon","_mdIconRegistry","ariaHidden","parts","_usingFontIcon","_updateFontIconClasses","_setSvgElement","layoutElement","elem","_previousFontSetClass","removeClass","fontIcon","MdIconModule","MAX_ANGLE","HAS_RAF","PROGRESS_SPINNER_STROKE_WIDTH","MdProgressSpinnerCssMatStyler","MdProgressSpinnerBase","_MdProgressSpinnerMixinBase","MdProgressSpinner","mode","_interdeterminateInterval","interval","clearInterval","newValue","clamp","_mode","startTime","Date","now","changeInValue","animateTo","animateFrom","animation_1","elapsedTime","duration","_renderArc","ease","rotation","animate$$1","_animateCircle","start","end","materialEase","rotationStartPoint","_cleanupIndeterminateAnimation","interdeterminateInterval","currentValue","_path","strokeWidth","HostBinding","MdSpinner","ngZone","MdProgressSpinnerModule","_value","_bufferValue","MdProgressBar","_primaryTransform","aria-valuemin","aria-valuemax","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","bufferValue","MdProgressBarModule","[attr.id]","_ngControl","_parentFormGroup","onOpen","_doc","_elementFocusedBeforeSidenavWasOpened","isFocusTrapEnabled","focusInitialElementWhenReady","MdSidenav","_align","_disableClose","activeEl","blur","_toggleAnimationPromise","_resolveToggleAnimationPromise","_opened","onOpenStart","onCloseStart","stopPropagation","transitionEvent","propertyName","endsWith","[attr.align]","[class.mat-sidenav-closed]","[class.mat-sidenav-closing]","[class.mat-sidenav-end]","[class.mat-sidenav-side]","onAlignChanged","MdSidenavContainer","_validateDrawers","_start","_end","_sidenavs","sidenav","_enableTransitions","all","onClose","_setContainerClass","_watchSidenavAlign","throwMdDuplicatedSidenavError","_onBackdropClicked","_closeModalSidenav","_isShowingBackdrop","_isSidenavOpen","side","_getSidenavEffectiveWidth","_getMarginLeft","_left","_getMarginRight","_right","_getPositionLeft","_getPositionOffset","_getPositionRight","_getStyles","marginLeft","marginRight","[class.mat-sidenav-transition]","aria-orientation","MdList","MdListCssMatStyler","MdNavListCssMatStyler","MdDividerCssMatStyler","MdListAvatarCssMatStyler","MdListIconCssMatStyler","MdListSubheaderCssMatStyler","MdListItem","_list","navList","avatar","_handleFocus","_getHostElement","MdListModule","MdLineModule","MdListDivider","_rowspan","_colspan","_setStyle","rowspan","colspan","_lineSetter","MdLineSetter","_lines","MdLine","MdGridTileHeaderCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","tracker","fill","positions","tile","_trackTile","gapStartIndex","TilePosition","tileCols","_nextRow","_markTilePosition","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","rowCount","_cols","_direction","sizePercent","gutterFraction","calc","baseSize","offset","getTileSize","span","colIndex","getTileSpan","tileHeight","FixedTileStyler","fixedRowHeight","setRowStyles","getTilePosition","getGutterSpan","RatioTileStyler","baseTileHeight","getBaseTileSize","percentHeightPerTile","gutterWidth","getComputedHeight","ratioParts","split","FitTileStyler","MdGridList","coerceToNumber","_gutter","_rowHeight","coerceToString","_checkCols","_checkRowHeight","_layoutTiles","_tileStyler","_setTileStyler","_tiles","pos","row","col","_setListStyle","style$$1","rowHeight","[attr.aria-labelledby]","[attr.aria-required]","transformPlaceholder","transformPanel","NgControl","Self","descendants","multiple","ariaLabelledby","MdSelectModule","MdSlideToggleChange","nextId$1","MdSlideToggleBase","MdSlideToggle","_focusOriginMonitor","_checked","labelPosition","_uniqueId","_slideRenderer","SlideToggleRenderer","stopMonitoring","_inputElement","dragging","toggle","onTouched","checked","onChange","focusVia","_onInputFocusChange","focusOrigin","_focusRipple","_onDrag","updateThumbPosition","deltaX","_onDragEnd","_previousChecked","dragPercentage","stopThumbDrag","_MdSlideToggleMixinBase","[class.mat-slide-toggle-label-before]","MD_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusOriginMonitor","disableRipple","_ripple","_thumbEl","distance","_getDragPercentage","dragX","_thumbBarWidth","percentage","MdSlideToggleModule","FormsModule","PlatformModule","FOCUS_ORIGIN_MONITOR_PROVIDER","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MdSlider","MdSliderChange","MdSliderBase","_MdSliderMixinBase","_invert","_step","_vertical","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","SliderRenderer","coerceNumberProperty","_percent","_calculatePercentage","_roundLabelTo","toString","pop","_tickInterval","tickInterval","_clamp","percent","axis","vertical","_invertMouseCoords","tickSize","backgroundSize","sign","rotate","_thumbGap","_invertAxis","getSliderDimensions","addFocus","_updateValueFromPosition","x","clientX","y","clientY","center","_onSlideStart","_onMouseenter","_onSlideEnd","_emitValueIfChanged","_onFocus","_onBlur","_increment","_onKeyup","numSteps","posComponent","size","closestValue","_lastChangeValue","_emitInputEvent","_lastInputValue","_updateTickIntervalPercent","trackSize","pixelsPerStep","step","stepsPerTick","ceil","pixelsPerTick","_calculateValue","writeValue","isDisabled","(mouseenter)","(slide)","(slideend)","tabindex","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","invert","thumbLabel","_thumbLabelDeprecated","_tickIntervalDeprecated","_sliderElement","StyleModule","RtlModule","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","MD_CHECKBOX_CONTROL_VALUE_ACCESSOR","indeterminate","MdCheckboxModule","ObserveContentModule","MdCheckbox","MdRadioGroup","_uniqueIdCounter$2","MdRadioChange","MdRadioGroupBase","_MdRadioGroupMixinBase","_changeDetector","_name","_labelPosition","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_radios","radio","isAlreadySelected","MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MdRadioButton","MdRadioButtonBase","_MdRadioButtonMixinBase","newCheckedState","radioGroup","_radioDispatcher","notify","monitor","_isRippleDisabled","_onInputClick","_onInputChange","groupValueChanged","_emitChangeEvent","launch","persistent","centered","[class.mat-radio-checked]","MdRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","_activeItemIndex","_activeItem","_setActiveItemByIndex","setLastItemActive","_setActiveItemByDelta","updateActiveItemIndex","_tabOut","_items","_setActiveInWrapMode","delta","_setActiveInDefaultMode","minWidth","fadeInContent","SELECT_MAX_OPTIONS_DISPLAYED","floor","MdSelectChange","MdSelectBase","MdSelect","_viewportRuler","_control","_scrollTop","_placeholderState","_optionIds","_panelDoneAnimating","_offsetY","_positions","valueAccessor","_setTriggerWidth","_selectionModel","getMdSelectDynamicMultipleError","_multiple","apply","onSelectionChange","_setSelectionByValue","_tabSubscription","_calculateOverlayPosition","_isRtl","_triggerWidth","_getTriggerRect","_handleClosedKeydown","_focusCorrectOption","overlayDir","offsetX","_onAttached","_calculateOverlayOffsetX","isArray","Array","getMdSelectNonArrayValueError","_clearSelection","isEmpty","_selectValue","isUserInput","optionsArray","correspondingOption","find","clear","_resetOptions","_onSelect","_setValueWidth","wasSelected","isSelected","_sortValues","_propagateChanges","_dropSubscriptions","_optionSubscription","fallbackValue","valueToEmit","_setOptionMultiple","_focusHost","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","hasValue","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","overlayRect","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","leftOverflow","optionOffsetFromPanelTop","selectedDisplayIndex","SELECT_ITEM_HEIGHT","_checkOverlayWithinViewport","viewportRect","getViewportRect","triggerRect","panelHeightBottom","totalPanelHeight","panelHeightTop","bottomSpaceAvailable","_adjustPanelUp","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","abs","_floatPlaceholderState","_handleArrowKey","currentActiveItem","prevActiveItem","optionGroups","groups","groupCounter","result","year","setFullYear","NativeDateAdapter","_stripDirectionalityCharacters","s","replace","NativeDateModule","MdNativeDateModule","useValue","MD_NATIVE_DATE_FORMATS","MdCoreModule","MdSelectionModule","MdButtonToggleGroupBase","_MdButtonToggleGroupMixinBase","MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MdButtonToggleGroup","_buttonToggles","_updateSelectedButtonToggleFromValue","_updateButtonToggleNames","MdButtonToggleChange","[class.mat-button-toggle-vertical]","MdButtonToggleGroupMultiple","MdButtonToggle","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","_uniqueIdCounter$1","_toggle","MdButtonToggleModule","DEFAULT_ROUND_BUTTON_COLOR","MdButtonCssMatStyler","MdRaisedButtonCssMatStyler","MdIconButtonCssMatStyler","MdFab","button","anchor","MdButton","MdAnchor","MdMiniFab","MdButtonBase","_MdButtonMixinBase","_isRoundButton","_hasAttributeWithPrefix","unprefixedAttributeNames","arguments","platform","focusOriginMonitor","stopImmediatePropagation","MdButtonModule","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MdCheckboxChange","MdCheckboxBase","_MdCheckboxMixinBase","nextId","_indeterminate","changed","_transitionCheckState","indeterminateChange","oldState","_currentCheckState","_currentAnimationClass","_removeFocusRipple","_onInteractionEvent","_getAnimationClassForCheckStateTransition","newState","animSuffix","fadeOut","ConnectedPositionStrategy","_getStartX","rect","_getEndX","_getOriginConnectionPoint","originRect","originStartX","originEndX","_getOverlayPoint","originPoint","overlayStartY","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","getScrollableViewProperties","overlayBounds","_getElementBounds","scrollContainerBounds","scrollables","scrollable","getElementRef","isOverlayClipped","isElementClipped","isOverlayOutsideView","isElementOutsideView","elementBounds","containersBounds","some","containerBounds","outsideLeft","outsideRight","outsideAbove","outsideBelow","clippedAbove","clippedBelow","clippedLeft","clippedRight","_setElementPosition","overlayPoint","horizontalStyleProperty","verticalStyleProperty","p","boundingClientRect","overflows","_cssPosition","_topOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","GlobalPositionStrategy","centerVertically","_wrapper","OverlayPositionBuilder","originPos","overlayPos","OverlayContainer","_containerElement","_createContainer","add","_themeClass","body","OVERLAY_CONTAINER_PROVIDER","_overlayContainer","_componentFactoryResolver","_positionBuilder","_appRef","_createPaneElement","pane","getContainerElement","_createPortalHost","DomPortalHost","Injector","ConnectionPositionPair","OverlayOrigin","ConnectedOverlayDirective","_hasBackdrop","_templatePortal","templateRef","_offsetX","withOffsetX","offsetY","withOffsetY","_destroyOverlay","defaultPositionList","_buildConfig","overlayConfig","_handlePositionChanges","positionChange","_attachOverlay","withDirection","_initEscapeListener","_backdropSubscription","_escapeListener","InteractivityChecker","hasAttribute","isBrowser","frameElement","getWindow","frameType","nodeName","toLowerCase","tabIndexValue","getTabIndexValue","BLINK","FIREFOX","WEBKIT","isPotentiallyTabbableIOS","isPotentiallyFocusable","FocusTrap","_checker","deferAnchors","_enabled","attachAnchors","val","_startAnchor","_endAnchor","_createAnchor","addEventListener","focusLastTabbableElement","focusFirstTabbableElement","insertBefore","nextSibling","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","markers","bound","console","warn","_getFirstTabbableElement","redirectToElement","_getRegionBoundary","root","children","tabbableChild","_getLastTabbableElement","isFocusable","isTabbable","isStable","focusTrap","FocusTrapDeprecatedDirective","FocusTrapDirective","elementToken","announce","_liveElement","textContent","_removeLiveElement","liveEl","LIVE_ANNOUNCER_ELEMENT_TOKEN","FullscreenOverlayContainer","getFullscreenElement","_addFullscreenChangeListener","webkitFullscreenEnabled","msFullscreenEnabled","mc","_hammer","pan","Pan","slide","_createRecognizer","threshold","swipe","longpress","press","time","base","inheritances","recognizer","HammerGestureConfig","SelectionModel","_isMulti","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_markSelected","from","values","_unmarkAll","eventData","_selectedToEmit","_unmarkSelected","SelectionChange","added","removed","_listeners","listener","UniqueSelectionDispatcher","_elementInfo","info_1","checkChildren","blurListener","focusListener","info","subject","elementInfo","unlisten","_setClasses","_registerDocumentEvents","_lastTouchTarget","_setOriginForCurrentEventQueue","_touchTimeout","window","_windowFocused","toggleClass","shouldSet","_wasCausedByTouch","focusTarget","_lastFocusOrigin","CdkMonitorFocus","cdkFocusChange","AnimationCurves","AnimationDurations","getDayOfWeekNames","clone","years","months","getISODateString","setLocale","locale","second","clampDate","DEFAULT_MONTH_NAMES","DEFAULT_DATE_NAMES","range","String","short","getFullYear","dtf_1","dtf_2","Intl","DateTimeFormat","day","SUPPORTS_INTL_API","dtf_3","weekday","DEFAULT_DAY_OF_WEEK_NAMES","dtf","_createDateWithOverflow","timestamp","isNaN","displayFormat","newDate","days","getUTCFullYear","old","MdMutationObserverFactory","callback","MutationObserver","_mutationObserverFactory","ObserveContent","debounce","_debouncer","debounceTime","mutations","_observer","characterData","subtree","RippleState","FADING_IN","RippleRef","HIDDEN","fadeOutRipple","RippleRenderer","_ruler","_isMousedown","_triggerEvents","_activeRipples","rippleConfig","rippleDisabled","onMouseup","onMouseLeave","setTriggerElement","pageX","containerRect","pageY","scrollPosition","ripple","radius","backgroundColor","rippleRef","rippleEl","transitionDuration","RIPPLE_FADE_OUT_DURATION","runTimeoutOutsideZone","fadeOutAll","_triggerElement","onMousedown","fadeInRipple","EDGE","test","navigator","userAgent","TRIDENT","MSStream","SAFARI","candidateInputTypes","_globalSubscription","_scrolledCount","scrollableReferences","register","scrollSubscription","elementScrolled","_notify","scrolled","auditTimeInMs","Subscription","EMPTY","observable","_scrolled","auditTime","fromEvent","subscription","scrollingContainers","scrollableElement","parentElement","SCROLL_DISPATCHER_PROVIDER","deps","useFactory","SCROLL_DISPATCHER_PROVIDER_FACTORY","scrollDispatcher","_cacheViewportGeometry","documentRect","_documentRect","getViewportScrollPosition","documentElement","scrollLeft","ruler","globalOptions","speedFactor","_globalOptions","_updateRippleRenderer","baseSpeedFactor","_rippleRenderer","_elementScrolled","Scrollable","_scrollListener","_scroll","deregister","CloseScrollStrategy","_scrollSubscription","getMdScrollStrategyAlreadyAttachedError","disable","NoopScrollStrategy","enable","BlockScrollStrategy","_isEnabled","_canBeEnabled","_previousScrollPosition","_previousHTMLStyles","remove","scroll","RepositionScrollStrategy","throttle","ScrollStrategyOptions","noop","MdPseudoCheckboxBase","MdPseudoCheckbox","_MdPseudoCheckboxBase","MdOptgroupBase","_uniqueOptgroupIdCounter","MdOptgroup","_MdOptgroupMixinBase","MdOptionSelectionChange","group","_emitSelectionChangeEvent","_active","[class.mat-selected]","[class.mat-option-multiple]","[id]","[attr.aria-selected]","[class.mat-option-disabled]","MATERIAL_COMPATIBILITY_MODE","Portal","_attachedHost","locals","_attachedPortal","throwNullPortalError","throwPortalAlreadyAttachedError","_isDisposed","throwPortalHostAlreadyDisposedError","setAttachedHost","_invokeDisposeFn","setDisposeFn","_disposeFn","componentFactory","resolveComponentFactory","ref","createComponent","parentInjector","_hostDomElement","_defaultInjector","componentRef","detachView","hostView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","OverlayRef","_pane","_scrollStrategy","_backdropElement","_backdropClick","_attachments","updateDirection","_togglePointerEvents","_attachBackdrop","attachResult","detachmentResult","_detachments","detachments","formatCssUnit","enablePointer","pointerEvents","_updateStackingOrder","backdropToDetach","finishDetach_1","ScrollableViewProperties","ConnectedOverlayPositionChange","_overlayPos","_preferredPositions","_originPos","fallbackPoint","fallbackPosition","fitsInViewport","scrollableViewProperties","_onPositionChange","lastPosition","withScrollableContainers","__extends","d","b","__","constructor","extendStatics","isString","isPresent","isFunction","createImage","src","img","HTMLImageElement","callFun","fun","dragDropServiceFactory","DragDropService","dragDropSortableServiceFactory","DragDropSortableService","getMdCompatibilityInvalidPrefixError","prefix","enforceStyleRecalculation","getComputedStyle","getPropertyValue","distanceToFurthestCorner","distX","distY","supportedInputTypes","featureTestInput","parentDispatcher","parentRuler","_color","defaultColor","colorPalette","class_1","class_2","throwUnknownPortalTypeError","throwNullPortalHostError","throwNoPortalAttachedError","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","isNativeFormElement","isInputElement","isAnchorElement","hasValidTabIndex","inputType","isAnchorWithHref","node","isFakeMousedownFromScreenReader","UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY","transformValue","trim","valuesArray","valueFunction","clampValue","n","exp","getMdIconNoHttpProviderError","polarToCartesian","pathRadius","angleInDegrees","linearEase","currentTime","startValue","timeQuad","pow","getSvgArc","startPoint","endAngle","startAngle","clamp$1","getMdInputContainerMissingMdInputError","extendObject","dest","sources","TypeError","sources_1","hasOwnProperty","throwMdMenuInvalidPositionY","provider","setPrototypeOf","__proto__","DataTransferEffect","COPY","LINK","MOVE","NONE","DragDropConfig","onDragStartClass","onDragEnterClass","onDragOverClass","onSortableDragClass","dragEffect","dropEffect","dragCursor","defaultCursor","allowedDropZones","_elem","markSortable","AbstractComponent","elemRef","_dragDropService","_cdr","_dragEnabled","dropEnabled","dropZones","cloneItem","_defaultCursor","cursor","ondragenter","_onDragEnter","ondragover","_onDragOver","dataTransfer","ondragleave","_onDragLeave","ondrop","_onDrop","onmousedown","_target","ondragstart","_dragHandle","_onDragStart","setData","effectAllowed","dragImage","setDragImage","imageElement","x_offset","y_offset","_dragHelper","cursorelem","effectCursor","ondragend","draggable","setDragHandle","_isDropAllowed","_onDragEnterCallback","_onDragOverCallback","_onDragLeaveCallback","_preventAndStop","_onDropCallback","isDragged","files","allowDrop","dragData","dragZone","_onDragStartCallback","_onDragEndCallback","AbstractHandleComponent","_Component","DraggableComponent","dragDropService","cdr","onDragStart","onDragEnd","onDragSuccessCallback","dragEnabled","mouseEvent","dropzones","effectallowed","effectcursor","DraggableHandleComponent","DroppableComponent","onDropSuccess","onDragEnter","onDragOver","onDragLeave","droppable","allowdrop","SortableContainer","_sortableDataService","_sortableData","sortableData","item","sortableContainer","splice","unshift","SortableComponent","_sortableContainer","onDragStartCallback","onDragOverCallback","onDragEndCallback","onDropSuccessCallback","SortableHandleComponent","DndModule","forRoot","ngModule","InjectionToken","MAT_ELEMENTS_SELECTOR","CompatibilityModule","doctype","_checkTheme","testElement","MATERIAL_SANITY_CHECKS","_setLineClass","count","_resetClasses","_setClass","isAdd"],"mappings":"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"}